{"version":3,"file":"overlay-Drawer-Drawer-stories.c13749d6.iframe.bundle.js","mappings":";;;AA4OA","sources":["webpack://storybook-react19/./src/overlay/Drawer/Drawer.stories.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport type { Meta, StoryFn } from '@storybook/react';\n\nimport { Drawer, DrawerSlide } from '@tiger-analytics/react/overlay';\nimport { Button, ButtonVariant } from '@tiger-analytics/react/button';\nimport { GridColumn, GridContainer } from '@tiger-analytics/react/grid';\n\nimport { TextInput, TextArea } from '@tiger-analytics/react/formFields';\n\nimport styled from 'styled-components';\n\nimport { DescriptionBlock, ImportBlock } from '../../utils';\n\nimport { DrawerSlide2 } from './DrawerSlide2';\n\nexport default {\n  title: 'Overlay/Drawer/Drawer',\n  component: Drawer,\n  parameters: {\n    controls: { expanded: true },\n  },\n  argTypes: {\n    id: {\n      description: 'Mandatory - unique id for testing',\n      table: {\n        defaultValue: { summary: '' },\n      },\n      control: 'text',\n    },\n    visible: {\n      description: 'Controls the visibility of the drawer',\n      table: {\n        defaultValue: { summary: 'false' },\n      },\n      control: false,\n    },\n    title: {\n      description: 'Mandatory - title to be displayed on the drawer',\n      table: {\n        defaultValue: { summary: '' },\n      },\n      control: 'text',\n    },\n    idToFocusOnClose: {\n      description: 'Accessibility - id of element to focus on close of Modal',\n      table: {\n        defaultValue: { summary: '' },\n      },\n      control: false,\n    },\n    onClose: {\n      description: 'Task to perform on close of the drawer.',\n      table: {\n        category: 'Custom Events',\n      },\n      control: false,\n    },\n    onSubmit: {\n      description:\n        'Task to perform on submit of the drawer. If the current DrawerSlide has validate property then its outcome (true/false) will decide if onSubmit will be executed or not.',\n      table: {\n        category: 'Custom Events',\n      },\n      control: false,\n    },\n  },\n} as Meta;\n\nconst description = (\n  <div>\n    The Drawer component is used to display sliding drawers, typically from the right side of the\n    screen. It is ideal for scenarios where you need to present additional content or actions\n    without interrupting the main flow. It can support both single-step and multi-step content\n    (automatically decided based on the number of DrawerSlide children).\n    <br />\n    <br />\n    <b>Note: </b>within any DrawerSlide component, useDrawerController hook can be used to\n    programmatically navigate to specific slide:\n    <br />\n    <pre>{`const {setActiveSlide} = useDrawerController();`}</pre>\n  </div>\n);\n\nconst ErrorContainer = styled.div`\n  font-size: 0.8rem;\n  color: red;\n`;\n\nconst Template: StoryFn = (args) => {\n  const [isSingleStepDrawrrVisible, setIsSingleStepDrawrrVisible] = useState(false);\n  const [isMultiStepDrawrrVisible, setIsMultiStepDrawrrVisible] = useState(false);\n  const [taskName, setTaskName] = useState('');\n  const [taskDescription, setTaskDescription] = useState('');\n  const [error, setError] = useState('');\n  const [taskName2, setTaskName2] = useState('');\n  const [taskDescription2, setTaskDescription2] = useState('');\n  const [error2, setError2] = useState('');\n\n  const drawerCloseHandler = (drawerId: string, drawerOpenerId: string) => {\n    const drawerActivateButton = document.getElementById(drawerOpenerId);\n\n    if (drawerActivateButton) {\n      drawerActivateButton.focus();\n    }\n    if (drawerId === `${args.id}-single`) {\n      setIsSingleStepDrawrrVisible(false);\n      setTaskName('');\n      setTaskDescription('');\n      setError('');\n    } else {\n      setIsMultiStepDrawrrVisible(false);\n      setTaskName2('');\n      setTaskDescription2('');\n      setError2('');\n    }\n  };\n\n  const taskNameChangeHandler = (value: string) => {\n    setTaskName(value);\n    setError('');\n  };\n\n  const taskDescriptionChangeHandler = (value: string) => {\n    setTaskDescription(value);\n    setError('');\n  };\n\n  const taskNameChangeHandler2 = (value: string) => {\n    setTaskName2(value);\n    setError2('');\n  };\n\n  const taskDescriptionChangeHandler2 = (value: string) => {\n    setTaskDescription2(value);\n    setError2('');\n  };\n\n  const slide1Validator = (): boolean => {\n    if (!taskName || !taskDescription) {\n      setError('Both name and description are required.');\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const slide1Validator2 = (): boolean => {\n    if (!taskName2 || !taskDescription2) {\n      setError2('Both name and description are required.');\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  return (\n    <GridContainer showSideMargin={false}>\n      <ImportBlock\n        importStatement={`import { Drawer, DrawerSlide, useDrawerController } from '@tiger-analytics/react/overlay';`}\n      />\n      <GridColumn style={{ gap: '10px' }}>\n        <Button\n          id=\"activate-drawer-single\"\n          onClick={() => setIsSingleStepDrawrrVisible(true)}\n          variant={ButtonVariant.Secondary}>\n          Show single step drawer\n        </Button>\n        <Button\n          id=\"activate-drawer-multi\"\n          onClick={() => setIsMultiStepDrawrrVisible(true)}\n          variant={ButtonVariant.Secondary}>\n          Show Multi step drawer\n        </Button>\n        <Drawer\n          id={`${args.id}-single`}\n          title=\"Drawer Single-Step\"\n          visible={isSingleStepDrawrrVisible}\n          onClose={() => drawerCloseHandler(`${args.id}-single`, 'activate-drawer-single')}\n          onSubmit={() => drawerCloseHandler(`${args.id}-single`, 'activate-drawer-single')}>\n          <DrawerSlide id=\"slide-1\" title=\"Slide 1\" validate={slide1Validator}>\n            <TextInput\n              id=\"create-task-name\"\n              label=\"Name\"\n              value={taskName}\n              onChangeHandler={taskNameChangeHandler}\n            />\n            <TextArea\n              id=\"create-task-description\"\n              label=\"Description\"\n              value={taskDescription}\n              onChangeHandler={taskDescriptionChangeHandler}\n              required\n            />\n            <ErrorContainer>{error}</ErrorContainer>\n          </DrawerSlide>\n        </Drawer>\n        <Drawer\n          id={`${args.id}-multi`}\n          title=\"Drawer Multi-Step\"\n          visible={isMultiStepDrawrrVisible}\n          onClose={() => drawerCloseHandler(`${args.id}-multi`, 'activate-drawer-multi')}\n          onSubmit={() => drawerCloseHandler(`${args.id}-multi`, 'activate-drawer-multi')}>\n          <DrawerSlide id=\"slide-2\" title=\"Slide 1\" validate={slide1Validator2}>\n            <TextInput\n              id=\"create-task-name-2\"\n              label=\"Name\"\n              value={taskName2}\n              onChangeHandler={taskNameChangeHandler2}\n            />\n            <TextArea\n              id=\"create-task-description-2\"\n              label=\"Description\"\n              value={taskDescription2}\n              onChangeHandler={taskDescriptionChangeHandler2}\n              required\n            />\n            <ErrorContainer>{error2}</ErrorContainer>\n          </DrawerSlide>\n          <DrawerSlide2 />\n          <DrawerSlide id=\"slide-3\" title=\"Slide 3\">\n            Slide 3 content\n          </DrawerSlide>\n        </Drawer>\n      </GridColumn>\n\n      <GridColumn>\n        <div className=\"story-title\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>\n      </GridColumn>\n\n      <GridColumn>\n        <DescriptionBlock description={description} />\n      </GridColumn>\n    </GridContainer>\n  );\n};\n\nexport const CodeAndAccessibility = Template.bind({});\nCodeAndAccessibility.args = {\n  id: 'test-drawer',\n  visible: false,\n};\n"],"names":[],"sourceRoot":""}