"use strict";(self.webpackChunkstorybook_react19=self.webpackChunkstorybook_react19||[]).push([[250],{"./src/notification/Snackbar.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CodeAndAccessibility:()=>CodeAndAccessibility,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_tiger_analytics_react_notification__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../packages/react/dist/notification/index.js"),_tiger_analytics_react_button__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../packages/react/dist/button/index.js"),_tiger_analytics_react_grid__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../packages/react/dist/grid/index.js"),_utils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/utils/index.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"Notification/Snackbar",component:_tiger_analytics_react_notification__WEBPACK_IMPORTED_MODULE_1__.qb,parameters:{controls:{expanded:!0}},argTypes:{id:{description:"Mandatory - unique id for testing",table:{defaultValue:{summary:""}},control:"text"},message:{description:"The message to be displayed in the snackbar",table:{defaultValue:{summary:""}},control:"text"},visible:{description:"Controls whether the snackbar is visible or not",table:{defaultValue:{summary:"false"}},control:!1},variant:{options:[_tiger_analytics_react_notification__WEBPACK_IMPORTED_MODULE_1__.t7.Error,_tiger_analytics_react_notification__WEBPACK_IMPORTED_MODULE_1__.t7.Info,_tiger_analytics_react_notification__WEBPACK_IMPORTED_MODULE_1__.t7.Success,_tiger_analytics_react_notification__WEBPACK_IMPORTED_MODULE_1__.t7.Warning],description:"The style variant of the notification",table:{defaultValue:{summary:_tiger_analytics_react_notification__WEBPACK_IMPORTED_MODULE_1__.t7.Success}},control:{type:"select"}},duration:{description:"Duration for auto-hide (0 means no auto-hide)",table:{defaultValue:{summary:"5000"}},control:"number"},idToFocusOnClose:{description:"Accessibility - id of element to focus on close of snackbar",table:{defaultValue:{summary:""}},control:!1},onClose:{description:"Triggered when the snackbar is closed (after the hide animation)",table:{category:"Custom Events"},control:!1}}},CodeAndAccessibility=(args=>{const[isVisible,setIsVisible]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_tiger_analytics_react_grid__WEBPACK_IMPORTED_MODULE_3__.E,{showSideMargin:!1},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_utils__WEBPACK_IMPORTED_MODULE_4__.Tx,{importStatement:"import { Snackbar } from '@tiger-analytics/react/notification';"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_tiger_analytics_react_grid__WEBPACK_IMPORTED_MODULE_3__.H,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_tiger_analytics_react_button__WEBPACK_IMPORTED_MODULE_2__.$n,{id:"show-snackbar",onClick:()=>{setIsVisible(!0)}},"Show/Hide Snackbar"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_tiger_analytics_react_notification__WEBPACK_IMPORTED_MODULE_1__.qb,{id:args.id,visible:isVisible,message:args.message,variant:args.variant,duration:args.duration,onClose:()=>{setIsVisible(!1)}})),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_utils__WEBPACK_IMPORTED_MODULE_4__.ur,{description:"The Snackbar component is designed to show non-intrusive feedback messages to the user. The component will automatically disappear after the specified duration, but it can also be manually dismissed."}))}).bind({});CodeAndAccessibility.args={id:"test-snackbar",message:"Success! Your operation was completed.",duration:5e3,variant:_tiger_analytics_react_notification__WEBPACK_IMPORTED_MODULE_1__.t7.Success};const __namedExportsOrder=["CodeAndAccessibility"];CodeAndAccessibility.parameters={...CodeAndAccessibility.parameters,docs:{...CodeAndAccessibility.parameters?.docs,source:{originalSource:"args => {\n  const [isVisible, setIsVisible] = useState(false);\n  const toggleSnackbar = () => {\n    setIsVisible(true);\n  };\n  const closeSnackbarHandler = () => {\n    setIsVisible(false);\n  };\n  return <GridContainer showSideMargin={false}>\n      <ImportBlock importStatement={`import { Snackbar } from '@tiger-analytics/react/notification';`} />\n      <GridColumn>\n        <Button id=\"show-snackbar\" onClick={toggleSnackbar}>\n          Show/Hide Snackbar\n        </Button>\n        <Snackbar id={args.id} visible={isVisible} message={args.message} variant={args.variant} duration={args.duration} onClose={closeSnackbarHandler} />\n      </GridColumn>\n      <DescriptionBlock description={description} />\n    </GridContainer>;\n}",...CodeAndAccessibility.parameters?.docs?.source}}}}}]);