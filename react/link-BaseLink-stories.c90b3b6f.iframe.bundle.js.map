{"version":3,"file":"link-BaseLink-stories.c90b3b6f.iframe.bundle.js","mappings":";;;AAKA;AACA;;;AAGA;AACA;AACA;;AAEA;;;;;;;;AAYA;;;;;;AAUA;AAKA;;;;AAIA;;;;;;AAUA;AAKA;;;;AAIA;;;;;;;;;;;;;;AChDA;;;ACNA;;AAQA;;;;;;ACFA;ACbA;AACA;;;;AAIA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;ACdA;;;AAGA;AACA;;;;;AAKA;;AAEA;AAEA;AACA;AACA;;;AAGA;;;;;;AAOA;;AAEA;;AAEA;;AAEA;AAEA;AACA;AACA;;;;;AAKA;;AAEA;AACA;;AAEA;AAEA;AACA;AACA","sources":["webpack://storybook-react19/../../packages/react/dist/link/styled.js","webpack://storybook-react19/./src/utils/ImportBlock.tsx","webpack://storybook-react19/./src/utils/DescriptionBlock.tsx","webpack://storybook-react19/./src/utils/Comment.tsx","webpack://storybook-react19/../../packages/react/dist/grid/GridColumn.js","webpack://storybook-react19/../../packages/react/dist/grid/GridContainer.js"],"sourcesContent":["import styled from 'styled-components';\nimport { LinkVariant, LinkSize, LinkStyle } from './types';\nexport const StyledLink = styled.a `\n  display: inline-flex;\n  text-decoration: none;\n  min-width: ${(props) => props.width ?? 'max-content'};\n  height: ${(props) => props.height ?? 'initial'};\n  align-items: center;\n  justify-content: center;\n  font-size: ${({ size }) => (size === LinkSize.Default ? '20px' : '16px')};\n  font-family: ${({ theme }) => theme.global.specificFontFamily};\n  padding: ${({ size }) => (size === LinkSize.Default ? '0.3rem 0.5rem' : '0.2rem 0.5rem')};\n  border: none;\n  color: ${({ theme, variant }) => variant === LinkVariant.Primary\n    ? theme.colors.primary.base\n    : variant === LinkVariant.Secondary\n        ? theme.colors.secondary.base\n        : theme.colors.error.base};\n  transition: all 0.5s;\n  cursor: pointer;\n  align-items: center;\n  gap: 6px;\n  background: transparent;\n\n  .design-system-link-inbuilt-right-arrow-icon {\n    fill: ${({ theme, variant }) => variant === LinkVariant.Primary\n    ? theme.colors.primary.base\n    : variant === LinkVariant.Secondary\n        ? theme.colors.secondary.base\n        : theme.colors.error.base};\n    transition: all 0.5s;\n    transform: translateX(0px);\n  }\n\n  &:hover:not([disabled]) {\n    color: ${({ theme, variant }) => variant === LinkVariant.Primary\n    ? theme.colors.primary.hover\n    : variant === LinkVariant.Secondary\n        ? theme.colors.secondary.hover\n        : theme.colors.error.hover};\n    text-decoration: ${({ linkStyle }) => (linkStyle === LinkStyle.Default ? 'underline' : 'none')};\n\n    .design-system-link-inbuilt-right-arrow-icon {\n      transform: translateX(4px);\n      fill: ${({ theme, variant }) => variant === LinkVariant.Primary\n    ? theme.colors.primary.hover\n    : variant === LinkVariant.Secondary\n        ? theme.colors.secondary.hover\n        : theme.colors.error.hover};\n    }\n  }\n\n  &:focus:not([disabled]),\n  &:active:not([disabled]) {\n    color: ${({ theme, variant }) => variant === LinkVariant.Primary\n    ? theme.colors.primary.active\n    : variant === LinkVariant.Secondary\n        ? theme.colors.secondary.active\n        : theme.colors.error.active};\n    text-decoration: ${({ linkStyle }) => (linkStyle === LinkStyle.Default ? 'underline' : 'none')};\n\n    .design-system-link-inbuilt-right-arrow-icon {\n      transform: translateX(4px);\n      fill: ${({ theme, variant }) => variant === LinkVariant.Primary\n    ? theme.colors.primary.active\n    : variant === LinkVariant.Secondary\n        ? theme.colors.secondary.active\n        : theme.colors.error.active};\n    }\n  }\n\n  &[disabled] {\n    opacity: 0.7;\n    cursor: inherit;\n    pointer-events: none;\n  }\n`;\n","import { GridColumn } from '@tiger-analytics/react/grid';\nimport React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const ImportBlockDiv = styled.div`\n  padding-bottom: 10px;\n  border-bottom: 1px solid var(--colors-primary-base);\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nexport interface ImportBlockProps {\n  importStatement: ReactNode;\n}\n\nexport const ImportBlock = ({ importStatement }: ImportBlockProps) => {\n  return (\n    <GridColumn>\n      <ImportBlockDiv>{importStatement}</ImportBlockDiv>\n    </GridColumn>\n  );\n};\n","import { GridColumn, GridContainer } from '@tiger-analytics/react/grid';\nimport React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const DescriptionBeforeSpacer = styled(GridColumn)`\n  border-bottom: 1px solid var(--colors-primary-base);\n  font-weight: bold;\n`;\n\nexport const DescriptionContent = styled(GridColumn)`\n  font-size: 14px;\n`;\n\nexport interface DescriptionBlockProps {\n  description: ReactNode;\n}\n\nexport const DescriptionBlock = ({ description }: DescriptionBlockProps) => {\n  return (\n    <GridContainer showSideMargin={false}>\n      <GridColumn>\n        <DescriptionBeforeSpacer>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        </DescriptionBeforeSpacer>\n      </GridColumn>\n      <DescriptionContent>{description}</DescriptionContent>\n    </GridContainer>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const CommentContainer = styled.div`\n  width: 100%;\n  font-size: 12px;\n  color: var(--colors-success-base);\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport interface CommentBlockProps {\n  children: ReactNode;\n}\n\nexport const CommentBlock = ({ children }: CommentBlockProps) => {\n  return <CommentContainer>{children}</CommentContainer>;\n};\n","import styled, { css } from 'styled-components';\nexport const GridColumn = styled.div `\n  grid-column: ${(props) => `span ${props.sm || props.theme.grid.small.columns}`};\n  display: ${(props) => (props.sm === 0 ? 'none' : 'flex')};\n  flex-direction: column;\n  align-items: 'flex-start';\n\n  ${({ theme, md, lg }) => css `\n    @media screen and (min-width: ${`${theme.breakpoints.medium}`}) {\n      grid-column: ${(props) => `span ${md || lg || props.theme.grid.medium.columns}`};\n      display: ${md === 0 ? 'none' : 'flex'};\n    }\n\n    @media screen and (min-width: ${`${theme.breakpoints.large}`}) {\n      grid-column: ${(props) => `span ${lg || props.theme.grid.large.columns}`};\n      display: ${lg === 0 ? 'none' : 'flex'};\n    }\n  `}\n`;\n","import styled, { css } from 'styled-components';\nexport const GridContainer = styled.div `\n  display: grid;\n  width: 100%;\n  grid-gap: ${({ theme }) => theme.grid.small.gutter};\n  grid-template-columns: repeat(${({ theme }) => theme.grid.small.columns}, 1fr);\n  grid-template-rows: initial;\n  grid-auto-rows: initial;\n  margin: 0;\n  max-width: 100%;\n  grid-column: span ${({ theme }) => theme.grid.small.columns};\n\n  ${({ showSideMargin }) => showSideMargin &&\n    css `\n      max-width: calc(100% - ${({ theme }) => theme.grid.small.margin} * 2);\n      margin-left: ${({ theme }) => theme.grid.small.margin} !important;\n      margin-right: ${({ theme }) => theme.grid.small.margin} !important;\n    `}\n\n  ${({ restrictHeightToMaxContent }) => restrictHeightToMaxContent &&\n    css `\n      grid-template-rows: max-content;\n      grid-auto-rows: max-content;\n    `}\n\n  @media screen and (min-width: 768px) {\n    grid-template-columns: repeat(${({ theme }) => theme.grid.medium.columns}, 1fr);\n    margin: 0;\n    grid-gap: ${({ theme }) => theme.grid.medium.gutter};\n    max-width: 100%;\n    grid-column: span ${({ theme }) => theme.grid.medium.columns};\n\n    ${({ showSideMargin }) => showSideMargin &&\n    css `\n        max-width: calc(100% - ${({ theme }) => theme.grid.medium.margin} * 2);\n        margin-left: ${({ theme }) => theme.grid.medium.margin} !important;\n        margin-right: ${({ theme }) => theme.grid.medium.margin} !important;\n      `}\n  }\n\n  @media screen and (min-width: 1200px) {\n    grid-template-columns: repeat(${({ theme }) => theme.grid.large.columns}, 1fr);\n    margin: 0;\n    grid-gap: ${({ theme }) => theme.grid.large.gutter};\n    grid-column: span ${({ theme }) => theme.grid.large.columns};\n\n    ${({ showSideMargin }) => showSideMargin &&\n    css `\n        max-width: calc(100% - ${({ theme }) => theme.grid.large.margin} * 2);\n        margin-left: ${({ theme }) => theme.grid.large.margin} !important;\n        margin-right: ${({ theme }) => theme.grid.large.margin} !important;\n      `}\n  }\n`;\n"],"names":[],"sourceRoot":""}