{"version":3,"file":"5.4587a654.iframe.bundle.js","mappings":";;;;;AAeA;;;ACNA;;AAQA;;;;;;ACFA;;;;;;ACRA;;;;;;;;;;ACNA;;ACGA;;;;;ACGA;;;ACFA;;;;ACEA;;;;;AAMA;AACA;AACA;;;;;;;;;;AAUA;;;;;;AAOA;AACA;;;;;;;;;;;;AC1BA;;;;;AAMA;;;AAGA;AACA;;;;;;;;;;;;;;AAcA;AACA;AACA;;;;;;AAMA;;;;AAKA;;;;;;;;ACtCA;;;;ACCA;;;;;;;AAQA;;;;;AAMA;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;AC7BA;ACLA;AACA;;;;AAIA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;ACdA;;;AAGA;AACA;;;;;AAKA;;AAEA;AAEA;AACA;AACA;;;AAGA;;;;;;AAOA;;AAEA;;AAEA;;AAEA;AAEA;AACA;AACA;;;;;AAKA;;AAEA;AACA;;AAEA;AAEA;AACA;AACA","sources":["webpack://storybook-react19/./src/utils/ImportBlock.tsx","webpack://storybook-react19/./src/utils/DescriptionBlock.tsx","webpack://storybook-react19/./src/utils/Comment.tsx","webpack://storybook-react19/../../packages/react/dist/formFields/FieldWrapper/index.js","webpack://storybook-react19/../../packages/react/dist/formFields/styled.js","webpack://storybook-react19/../../packages/react/dist/formFields/TextArea/index.js","webpack://storybook-react19/../../packages/react/dist/formFields/TextInput/styled.js","webpack://storybook-react19/../../packages/react/dist/formFields/TextInput/index.js","webpack://storybook-react19/../../packages/react/dist/formFields/Checkbox/styled.js","webpack://storybook-react19/../../packages/react/dist/formFields/Toggle/styled.js","webpack://storybook-react19/../../packages/react/dist/formFields/Toggle/index.js","webpack://storybook-react19/../../packages/react/dist/formFields/Select/styled.js","webpack://storybook-react19/../../packages/react/dist/formFields/Select/index.js","webpack://storybook-react19/../../packages/react/dist/grid/GridColumn.js","webpack://storybook-react19/../../packages/react/dist/grid/GridContainer.js"],"sourcesContent":["import { GridColumn } from '@tiger-analytics/react/grid';\nimport React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const ImportBlockDiv = styled.div`\n  padding-bottom: 10px;\n  border-bottom: 1px solid var(--colors-primary-base);\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nexport interface ImportBlockProps {\n  importStatement: ReactNode;\n}\n\nexport const ImportBlock = ({ importStatement }: ImportBlockProps) => {\n  return (\n    <GridColumn>\n      <ImportBlockDiv>{importStatement}</ImportBlockDiv>\n    </GridColumn>\n  );\n};\n","import { GridColumn, GridContainer } from '@tiger-analytics/react/grid';\nimport React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const DescriptionBeforeSpacer = styled(GridColumn)`\n  border-bottom: 1px solid var(--colors-primary-base);\n  font-weight: bold;\n`;\n\nexport const DescriptionContent = styled(GridColumn)`\n  font-size: 14px;\n`;\n\nexport interface DescriptionBlockProps {\n  description: ReactNode;\n}\n\nexport const DescriptionBlock = ({ description }: DescriptionBlockProps) => {\n  return (\n    <GridContainer showSideMargin={false}>\n      <GridColumn>\n        <DescriptionBeforeSpacer>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        </DescriptionBeforeSpacer>\n      </GridColumn>\n      <DescriptionContent>{description}</DescriptionContent>\n    </GridContainer>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const CommentContainer = styled.div`\n  width: 100%;\n  font-size: 12px;\n  color: var(--colors-success-base);\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport interface CommentBlockProps {\n  children: ReactNode;\n}\n\nexport const CommentBlock = ({ children }: CommentBlockProps) => {\n  return <CommentContainer>{children}</CommentContainer>;\n};\n","import styled, { css } from 'styled-components';\nexport const FieldWrapper = styled.div `\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 4px;\n\n  ${({ disabled = false }) => disabled &&\n    css `\n      opacity: 0.6;\n    `}\n`;\n","import styled from 'styled-components';\nexport const FieldDescription = styled.div `\n  font-size: 14px;\n`;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { StyledTextArea } from './styled';\nimport { FieldWrapper } from '../FieldWrapper';\nimport { FieldDescription } from '../styled';\nexport const TextArea = (props) => {\n    const { id, label, description, disabled = false, rows = 4, onChangeHandler, onChange, ...rest } = props;\n    const onTextAreaChangeHandler = (event) => {\n        if (onChange) {\n            onChange(event);\n        }\n        else {\n            onChangeHandler?.(event.target.value);\n        }\n    };\n    return (_jsxs(FieldWrapper, { disabled: disabled, children: [label && _jsx(\"label\", { htmlFor: `${id}-input`, children: label }), _jsx(StyledTextArea, { id: `${id}-input`, disabled: disabled, rows: rows, \"aria-describedby\": description ? `${id}-description` : '', onChange: onTextAreaChangeHandler, ...rest }), description && _jsx(FieldDescription, { id: `${id}-description`, children: description })] }));\n};\n","import styled from 'styled-components';\nimport { FieldSize } from '../types';\nexport const StyledInput = styled.input `\n  width: 100%;\n  font-size: 20px;\n  padding-left: 4px;\n  padding-right: 4px;\n  height: ${({ size }) => (size === FieldSize.Default ? '40px' : '30px')};\n  border-radius: var(--global-componentRadius);\n  border: 1px solid var(--colors-primary-base);\n`;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { FieldSize } from '../types';\nimport { FieldWrapper } from '../FieldWrapper';\nimport { FieldDescription } from '../styled';\nimport { StyledInput } from './styled';\nexport const TextInput = (props) => {\n    const { id, size = FieldSize.Default, type = 'text', label, description, disabled = false, onChangeHandler, onChange, ...rest } = props;\n    const onInputChangeHandler = (event) => {\n        if (onChange) {\n            onChange(event);\n        }\n        else {\n            onChangeHandler?.(event.target.value);\n        }\n    };\n    return (_jsxs(FieldWrapper, { disabled: disabled, children: [label && _jsx(\"label\", { htmlFor: `${id}-input`, children: label }), _jsx(StyledInput, { id: `${id}-input`, disabled: disabled, size: size, type: type, \"aria-describedby\": description ? `${id}-description` : '', onChange: onInputChangeHandler, ...rest }), description && _jsx(FieldDescription, { id: `${id}-description`, children: description })] }));\n};\n","import styled, { css } from 'styled-components';\nimport { FieldSize } from '../types';\nexport const StyledCheckboxContainer = styled.div `\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\nexport const StyledCheckboxInput = styled.input `\n  position: absolute;\n  opacity: 0;\n  width: 0px;\n  height: 0px;\n`;\nexport const StyledCheckbox = styled.div `\n  width: ${({ size }) => (size === FieldSize.Default ? '40px' : '30px')};\n  height: ${({ size }) => (size === FieldSize.Default ? '40px' : '30px')};\n  border-radius: var(--global-componentRadius);\n  border: 1px solid var(--colors-primary-base);\n  background-color: var(--colors-background-base);\n  transition: all 0.25s;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  ${({ checked, size }) => checked &&\n    css `\n      background-color: var(--colors-primary-base);\n      border-color: var(--colors-primary-base);\n\n      svg {\n        fill: var(--colors-background-base);\n        width: ${size === FieldSize.Default ? '30px' : '24px'};\n        height: ${size === FieldSize.Default ? '30px' : '24px'};\n      }\n    `}\n\n  &:focus-within {\n    outline: none;\n    border: 2px solid var(--colors-primary-active);\n  }\n`;\n","import styled, { css } from 'styled-components';\nimport { FieldSize } from '../types';\nexport const StyledToggleContainer = styled.div `\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\nexport const StyledToggleInput = styled.input `\n  position: absolute;\n  opacity: 0;\n  width: 0px;\n  height: 0px;\n`;\nexport const StyledToggle = styled.div `\n  display: flex;\n  align-items: center;\n  width: ${({ size }) => (size === FieldSize.Default ? '50px' : '40px')};\n  height: ${({ size }) => (size === FieldSize.Default ? '24px' : '20px')};\n  border-radius: 25px;\n  border: 2px solid var(--colors-primary-base);\n  background-color: white;\n  transition: all 0.25s;\n  cursor: pointer;\n\n  &:hover {\n    border: 2px solid var(--colors-primary-hover);\n  }\n\n  &::before {\n    content: '';\n    display: inline-block;\n    width: ${({ size }) => (size === FieldSize.Default ? '18px' : '14px')};\n    height: ${({ size }) => (size === FieldSize.Default ? '18px' : '14px')};\n    background-color: ${({ theme, checked }) => checked ? theme.colors.success.base : theme.colors.primary.hover};\n    margin-left: 2px;\n    border-radius: 50%;\n    transition: all 0.25s;\n  }\n\n  ${({ checked, size }) => checked &&\n    css `\n      border-color: var(--colors-primary-base);\n\n      &::before {\n        transform: ${size === FieldSize.Default ? 'translateX(24px)' : 'translateX(18px)'};\n      }\n    `}\n\n  &:focus-within {\n    outline: none;\n    border: 2px solid var(--colors-primary-hover);\n  }\n`;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useRef } from 'react';\nimport { FieldSize } from '../types';\nimport { FieldWrapper } from '../FieldWrapper';\nimport { FieldDescription } from '../styled';\nimport { StyledToggleContainer, StyledToggleInput, StyledToggle } from './styled';\nexport const Toggle = (props) => {\n    const { id, size = FieldSize.Default, label, description, disabled = false, checked = false, onChange, onChangeHandler, ...rest } = props;\n    const inputRef = useRef(null);\n    const onToggleChangeHandler = (event) => {\n        if (onChange) {\n            onChange(event);\n        }\n        else {\n            onChangeHandler?.(event.target.checked);\n        }\n    };\n    const onCustomToggleClick = () => {\n        if (inputRef && inputRef.current && !disabled) {\n            inputRef.current.click();\n        }\n    };\n    return (_jsxs(FieldWrapper, { disabled: disabled, children: [_jsxs(StyledToggleContainer, { children: [_jsx(StyledToggle, { id: id, size: size, checked: checked, onClick: onCustomToggleClick, children: _jsx(StyledToggleInput, { id: `${id}-checkbox`, ref: inputRef, type: \"checkbox\", disabled: disabled, checked: checked, \"aria-describedby\": description ? `${id}-description` : '', onChange: onToggleChangeHandler, ...rest }) }), label && _jsx(\"label\", { htmlFor: `${id}-checkbox`, children: label })] }), description && _jsx(FieldDescription, { id: `${id}-description`, children: description })] }));\n};\n","import styled from 'styled-components';\nimport { Select } from 'radix-ui';\nimport { FieldSize } from '../types';\nexport const SelectTrigger = styled(Select.Trigger) `\n  width: 100%;\n  font-size: 20px;\n  padding: 0 4px;\n  height: ${({ size }) => (size === FieldSize.Default ? '40px' : '30px')};\n  border-radius: var(--global-componentRadius);\n  border: 1px solid var(--colors-primary-base);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background-color: var(--colors-background-base);\n`;\nexport const SelectContent = styled(Select.Content) `\n  background-color: var(--colors-background-base);\n  border-radius: var(--global-componentRadius);\n  box-shadow: 0 2px 10px var(--colors-primary-hover);\n  overflow: hidden;\n`;\nexport const SelectItem = styled(Select.Item) `\n  display: flex;\n  justify-content: space-between;\n  font-size: 1rem;\n  padding: 8px 10px;\n  outline: none;\n  cursor: pointer;\n  &:hover {\n    background-color: var(--colors-background-active);\n  }\n  &[data-disabled] {\n    color: var(--colors-textPrimary-hover);\n    pointer-events: none;\n  }\n`;\nexport const SortIconContainer = styled.span `\n  margin: 4px auto;\n  width: 1rem;\n  height: 1rem;\n  width: 1rem;\n  height: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  svg {\n    width: 1rem;\n    height: 1rem;\n  }\n`;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Select as RadixSelect } from 'radix-ui';\nimport { FieldWrapper } from '../FieldWrapper';\nimport { FieldDescription } from '../styled';\nimport { SelectTrigger, SelectContent, SelectItem, SortIconContainer } from './styled';\nimport { FieldSize } from '../types';\nimport { DoneIcon, DownArrowIcon, UpArrowIcon } from '../../icons';\nexport const Select = (props) => {\n    const { id, label, description, size = FieldSize.Default, options, disabled = false, onChangeHandler, onChange, placeholder = 'select', dir, ...rest } = props;\n    const handleValueChange = (value) => {\n        if (onChange) {\n            onChange({ target: { value } });\n        }\n        else {\n            onChangeHandler?.(value);\n        }\n    };\n    return (_jsxs(FieldWrapper, { disabled: disabled, children: [label && _jsx(\"label\", { htmlFor: id, children: label }), _jsxs(RadixSelect.Root, { onValueChange: handleValueChange, disabled: disabled, ...rest, children: [_jsxs(SelectTrigger, { id: id, \"aria-describedby\": description ? `${id}-description` : '', size: size, children: [_jsx(RadixSelect.Value, { placeholder: placeholder }), _jsx(RadixSelect.Icon, { children: _jsx(SortIconContainer, { children: _jsx(DownArrowIcon, {}) }) })] }), _jsx(RadixSelect.Portal, { children: _jsxs(SelectContent, { children: [_jsx(RadixSelect.ScrollUpButton, { children: _jsx(SortIconContainer, { children: _jsx(UpArrowIcon, {}) }) }), _jsx(RadixSelect.Viewport, { children: options.map((option) => (_jsxs(SelectItem, { value: option.value, disabled: option.disabled, children: [_jsx(RadixSelect.ItemText, { children: option.label }), _jsx(RadixSelect.ItemIndicator, { children: _jsx(DoneIcon, { width: \"16px\", height: \"16px\" }) })] }, option.value))) }), _jsx(RadixSelect.ScrollDownButton, { children: _jsx(SortIconContainer, { children: _jsx(DownArrowIcon, {}) }) })] }) })] }), description && _jsx(FieldDescription, { id: `${id}-description`, children: description })] }));\n};\n","import styled, { css } from 'styled-components';\nexport const GridColumn = styled.div `\n  grid-column: ${(props) => `span ${props.sm || props.theme.grid.small.columns}`};\n  display: ${(props) => (props.sm === 0 ? 'none' : 'flex')};\n  flex-direction: column;\n  align-items: 'flex-start';\n\n  ${({ theme, md, lg }) => css `\n    @media screen and (min-width: ${`${theme.breakpoints.medium}`}) {\n      grid-column: ${(props) => `span ${md || lg || props.theme.grid.medium.columns}`};\n      display: ${md === 0 ? 'none' : 'flex'};\n    }\n\n    @media screen and (min-width: ${`${theme.breakpoints.large}`}) {\n      grid-column: ${(props) => `span ${lg || props.theme.grid.large.columns}`};\n      display: ${lg === 0 ? 'none' : 'flex'};\n    }\n  `}\n`;\n","import styled, { css } from 'styled-components';\nexport const GridContainer = styled.div `\n  display: grid;\n  width: 100%;\n  grid-gap: ${({ theme }) => theme.grid.small.gutter};\n  grid-template-columns: repeat(${({ theme }) => theme.grid.small.columns}, 1fr);\n  grid-template-rows: initial;\n  grid-auto-rows: initial;\n  margin: 0;\n  max-width: 100%;\n  grid-column: span ${({ theme }) => theme.grid.small.columns};\n\n  ${({ showSideMargin }) => showSideMargin &&\n    css `\n      max-width: calc(100% - ${({ theme }) => theme.grid.small.margin} * 2);\n      margin-left: ${({ theme }) => theme.grid.small.margin} !important;\n      margin-right: ${({ theme }) => theme.grid.small.margin} !important;\n    `}\n\n  ${({ restrictHeightToMaxContent }) => restrictHeightToMaxContent &&\n    css `\n      grid-template-rows: max-content;\n      grid-auto-rows: max-content;\n    `}\n\n  @media screen and (min-width: 768px) {\n    grid-template-columns: repeat(${({ theme }) => theme.grid.medium.columns}, 1fr);\n    margin: 0;\n    grid-gap: ${({ theme }) => theme.grid.medium.gutter};\n    max-width: 100%;\n    grid-column: span ${({ theme }) => theme.grid.medium.columns};\n\n    ${({ showSideMargin }) => showSideMargin &&\n    css `\n        max-width: calc(100% - ${({ theme }) => theme.grid.medium.margin} * 2);\n        margin-left: ${({ theme }) => theme.grid.medium.margin} !important;\n        margin-right: ${({ theme }) => theme.grid.medium.margin} !important;\n      `}\n  }\n\n  @media screen and (min-width: 1200px) {\n    grid-template-columns: repeat(${({ theme }) => theme.grid.large.columns}, 1fr);\n    margin: 0;\n    grid-gap: ${({ theme }) => theme.grid.large.gutter};\n    grid-column: span ${({ theme }) => theme.grid.large.columns};\n\n    ${({ showSideMargin }) => showSideMargin &&\n    css `\n        max-width: calc(100% - ${({ theme }) => theme.grid.large.margin} * 2);\n        margin-left: ${({ theme }) => theme.grid.large.margin} !important;\n        margin-right: ${({ theme }) => theme.grid.large.margin} !important;\n      `}\n  }\n`;\n"],"names":[],"sourceRoot":""}