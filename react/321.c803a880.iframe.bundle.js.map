{"version":3,"file":"321.c803a880.iframe.bundle.js","mappings":";;AAKA;;;AAGA;;AAEA;AACA;;AAEA;;;;;AAKA;;AAMA;;;AAOA;;;;AAQA;AACA;AACA;AACA;;;;;AAKA;;;;;AASA;;;AAOA;;AAIA;;;AAOA;;;;;AASA;;AAMA;;;;;;;AAWA;;AAMA;;;AASA;;AAGA;;AAMA;;;AAOA;;;;;AASA;;AAMA;;;AAOA;;;;;;;AAWA;;AAMA;;AAMA;;;AA7DA;;;;;;;;;AC9GA;AACA;AACA;;AAEA;;AAEA;ACVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;AChEA;AACA;;AAMA;;;;;;;;AAYA;;ACjBA;;;;;;;;;ACMA;AACA;;;;;;;;;;;;AAaA;;;;AAKA;;;;;;;;;;;;;;;;ACfA;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;AAIA;;;;;;;;;AAUA;;;ACjDA;;;;;;;;;;;;;ACYA;;;;;;;;;;;;;;;;;;AAmBA;;;;AAKA;;;ACjCA;;;AAAA","sources":["webpack://storybook-react19/../../packages/react/dist/button/Base.js","webpack://storybook-react19/../../packages/react/dist/loader/Spinner.js","webpack://storybook-react19/../../packages/react/dist/loader/LoadingBar.js","webpack://storybook-react19/../../packages/react/dist/overlay/Base/styled.js","webpack://storybook-react19/../../packages/react/dist/overlay/Base/index.js","webpack://storybook-react19/../../packages/react/dist/overlay/Modal/styled.js","webpack://storybook-react19/../../packages/react/dist/overlay/Drawer/styled.js","webpack://storybook-react19/../../packages/react/dist/overlay/Drawer/DrawerContext.js","webpack://storybook-react19/../../packages/react/dist/overlay/SideSheet/styled.js","webpack://storybook-react19/../../packages/react/dist/overlay/SideSheet/index.js"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { getThemeColorValue } from '../theme/utils';\nimport { ButtonFillStyle, ButtonSize, ButtonVariant } from './types';\nexport const Button = styled.button `\n  display: inline-flex;\n  width: ${({ iconOnly = false, size = ButtonSize.Default }) => iconOnly ? (size === ButtonSize.Default ? '44px' : '30px') : '100%'};\n  align-items: center;\n  justify-content: center;\n  height: ${({ size = ButtonSize.Default }) => (size === ButtonSize.Small ? '30px' : '44px')};\n  font-size: 20px;\n  font-family: ${({ theme }) => theme.global.specificFontFamily};\n  padding: ${({ iconOnly = false }) => (iconOnly ? 0 : ' 0 1.5rem')};\n  border: none;\n  border-radius: ${({ theme }) => theme.global.componentRadius};\n  transition: all 0.5s;\n  cursor: pointer;\n  flex-shrink: 0;\n\n  background-color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.primary.base\n    : variant === ButtonVariant.Secondary\n        ? getThemeColorValue('secondary')\n        : theme.colors.error.base};\n\n  color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.textSecondary.base\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.textPrimary.base\n        : theme.colors.textSecondary.base};\n\n  svg {\n    fill: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.textSecondary.base\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.textPrimary.base\n        : theme.colors.textSecondary.base};\n    transition: all 0.5s;\n  }\n\n  ${({ theme, iconOnly = false, size = ButtonSize.Default }) => css `\n    @media screen and (min-width: ${`${theme.breakpoints.medium}`}) {\n      width: ${iconOnly ? (size === ButtonSize.Default ? '44px' : '30px') : 'max-content'};\n      min-width: ${iconOnly ? (size === ButtonSize.Default ? '44px' : '30px') : '120px'};\n    }\n  `}\n\n  &:hover:not([disabled]) {\n    background-color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.primary.hover\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.secondary.hover\n        : theme.colors.error.hover};\n  }\n\n  &:focus:not([disabled]),\n  &:active:not([disabled]) {\n    background-color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.primary.active\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.secondary.active\n        : theme.colors.error.active};\n  }\n\n  ${({ theme, fill = ButtonFillStyle.Filled, variant = ButtonVariant.Primary }) => {\n    if (fill === ButtonFillStyle.None) {\n        return css `\n        background-color: transparent;\n        color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n\n        svg {\n          fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n        }\n\n        &:hover:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          }\n        }\n\n        &:active:not([disabled]),\n        &:focus:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          }\n        }\n      `;\n    }\n    if (fill === ButtonFillStyle.Outline) {\n        return css `\n        background-color: transparent;\n        color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n        border: 2px solid\n          ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n\n        svg {\n          fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n        }\n\n        &:hover:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          border: 2px solid\n            ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          }\n        }\n\n        &:focus:not([disabled]),\n        &:active:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          border: 2px solid\n            ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          }\n        }\n      `;\n    }\n}}\n\n  &[disabled] {\n    opacity: 0.7;\n    cursor: inherit;\n  }\n`;\n","import styled, { keyframes } from 'styled-components';\nexport const rotate = keyframes `\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\nexport const Spinner = styled.div `\n  width: ${({ size }) => `${size}px`};\n  height: ${({ size }) => `${size}px`};\n  border-radius: 50%;\n  border: ${({ color = 'var(--colors-primary-base)' }) => `4px solid ${color}`};\n  border-top-color: transparent;\n  animation: ${rotate} 1s linear infinite;\n`;\n","import styled from 'styled-components';\nexport const LoadingBar = styled.div `\n  @keyframes expanding {\n    0% {\n      transform: scaleX(0);\n      opacity: 0;\n    }\n    100% {\n      transform: scaleX(1);\n      opacity: 1;\n    }\n  }\n\n  @keyframes moving {\n    0% {\n      background-position: 0 0;\n    }\n    100% {\n      background-position: -200% 0;\n    }\n  }\n\n  height: 1.25rem;\n  width: 80%;\n  margin: 2rem 0;\n  position: relative;\n  transform-origin: left;\n  animation:\n    expanding 0.4s 0.7s forwards linear,\n    moving 1s 1s infinite forwards linear;\n  border-radius: 0.125rem;\n  background-image: ${({ theme }) => `linear-gradient(to right, ${theme.colors.background.base} 30%, ${theme.colors.primary.base} 60%,  ${theme.colors.background.base})`};\n  background-size: 200% auto;\n  opacity: 0;\n  animation-delay: 100ms;\n\n  &:before {\n    display: block;\n    height: 1.25rem;\n    content: '';\n    width: 60%;\n    position: relative;\n    top: -2rem;\n    transform-origin: left;\n    animation:\n      expanding 0.4s 0.7s forwards linear,\n      moving 1s 1s infinite forwards linear;\n    border-radius: 0.125rem;\n    background-image: ${({ theme }) => `linear-gradient(to right, ${theme.colors.background.base} 30%, ${theme.colors.primary.base} 60%,  ${theme.colors.background.base})`};\n    background-size: 200% auto;\n    opacity: 0;\n    animation-delay: 100ms;\n  }\n\n  &:after {\n    display: block;\n    height: 1.25rem;\n    content: '';\n    width: 80%;\n    position: relative;\n    top: 0.75rem;\n    transform-origin: left;\n    animation:\n      expanding 0.4s 0.7s forwards linear,\n      moving 1s 1s infinite forwards linear;\n    border-radius: 0.125rem;\n    background-image: ${({ theme }) => `linear-gradient(to right, ${theme.colors.background.base} 30%, ${theme.colors.primary.base} 60%,  ${theme.colors.background.base})`};\n    background-size: 200% auto;\n    opacity: 0;\n    animation-delay: 100ms;\n  }\n`;\n","import styled from 'styled-components';\nexport const OverlayContainer = styled.div `\n  display: ${({ visible }) => (visible ? 'flex' : 'none')};\n  align-items: ${({ overlayContentAlign }) => overlayContentAlign.split(' ')[0] === 'middle'\n    ? 'center'\n    : overlayContentAlign.split(' ')[0] === 'top'\n        ? 'flex-start'\n        : 'flex-end'};\n\n  justify-content: ${({ overlayContentAlign }) => overlayContentAlign.split(' ')[1] === 'center'\n    ? 'center'\n    : overlayContentAlign.split(' ')[1] === 'left'\n        ? 'flex-start'\n        : 'flex-end'};\n\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 1000;\n  background: ${({ visible }) => (visible ? 'rgba(0, 0, 0, 0.5)' : 'none')};\n  transition: all 0.3s ease;\n`;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport FocusLock from 'react-focus-lock';\nimport { OverlayContentAlign } from '../types';\nimport { OverlayContainer } from './styled';\nexport const Overlay = (props) => {\n    const { id, visible, overlayContentAlign = OverlayContentAlign.MiddleCenter, idToFocusOnClose, children, } = props;\n    const onOverlayDeactivation = () => {\n        if (idToFocusOnClose) {\n            setTimeout(() => {\n                document.getElementById(idToFocusOnClose)?.focus();\n            }, 0);\n        }\n    };\n    return (_jsx(FocusLock, { disabled: !visible, onDeactivation: onOverlayDeactivation, children: _jsx(OverlayContainer, { id: id, visible: visible, overlayContentAlign: overlayContentAlign, children: children }) }));\n};\n","import styled, { css } from 'styled-components';\nexport const ModalContainer = styled.div `\n  background: var(--colors-background-hover);\n  border-radius: var(--global-componentRadius);\n  display: flex;\n  flex-direction: column;\n  padding: 0.5rem 1rem 1rem;\n  width: 90%;\n  max-width: 550px;\n\n  ${({ theme }) => css `\n    @media screen and (min-width: ${`${theme.breakpoints.medium}`}) {\n      width: 70%;\n      max-width: 600px;\n    }\n    @media (min-width: 768px) {\n    }\n  `}\n\n  @media (min-width: 1024px) {\n    width: 50%;\n    max-width: 800px;\n  }\n`;\nexport const ModalHeader = styled.div `\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n`;\nexport const ModalHeaderTitle = styled.h2 `\n  flex-grow: 1;\n  color: var(--colors-secondary-base);\n`;\n","import styled from 'styled-components';\nexport const DrawerContainer = styled.div `\n  position: fixed;\n  top: 0;\n  right: 0;\n  padding: 0.6rem 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 444px;\n  height: 100%;\n  background-color: white;\n  box-shadow: -4px 0 10px rgba(0, 0, 0, 0.1);\n  transform: translateX(100%);\n  animation: ${({ visible }) => (visible ? 'slideIn 0.4s ease-in-out forwards' : 'none')};\n\n  @keyframes slideIn {\n    from {\n      transform: translateX(100%);\n    }\n    to {\n      transform: translateX(0);\n    }\n  }\n\n  @media (min-width: 768px) {\n    width: 70%;\n    max-width: 600px;\n  }\n\n  h2 {\n    border: 1px solid var(--colors-textPrimary-hover);\n    border-bottom: 2px solid var(--colors-warning-base);\n    border-radius: 5px 5px 0 0;\n    padding: 0 8px;\n  }\n`;\nexport const DrawerBody = styled.div `\n  flex-grow: 1;\n  overflow-y: auto;\n`;\nexport const DrawerFooter = styled.div `\n  display: flex;\n  justify-content: space-between;\n  padding-top: 8px;\n  border-top: 1px solid var(--colors-textPrimary-hover);\n\n  button {\n    width: fit-content;\n  }\n`;\nexport const DrawerSlideContainer = styled.div `\n  display: flex;\n  flex-direction: column;\n`;\n","import { createContext, useContext } from 'react';\nimport { throwUserError } from '../../utils';\nexport const DrawerContext = createContext({\n    setActiveSlide: () => { },\n});\nexport const useDrawerController = () => {\n    let setActiveSlide = (_index) => { };\n    const drawerContext = useContext(DrawerContext);\n    if (!drawerContext) {\n        throwUserError('useDrawerController must be used within a Drawer');\n    }\n    else {\n        setActiveSlide = drawerContext?.setActiveSlide;\n    }\n    return { setActiveSlide };\n};\n","import styled from 'styled-components';\nexport const SideSheetContainer = styled.div `\n  position: fixed;\n  top: 0;\n  right: 0;\n  padding: 0.6rem 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 444px;\n  height: 100%;\n  background-color: white;\n  box-shadow: -4px 0 10px rgba(0, 0, 0, 0.1);\n  transform: translateX(100%);\n  animation: ${({ visible }) => (visible ? 'slideIn 0.4s ease-in-out forwards' : 'none')};\n\n  @keyframes slideIn {\n    from {\n      transform: translateX(100%);\n    }\n    to {\n      transform: translateX(0);\n    }\n  }\n\n  @media (min-width: 768px) {\n    width: 80%;\n    max-width: 800px;\n  }\n\n  h2 {\n  }\n`;\nexport const SideSheetHeader = styled.div `\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row-reverse;\n`;\nexport const SideSheetBody = styled.div `\n  flex-grow: 1;\n  overflow-y: auto;\n`;\nexport const SideSheetSlideContainer = styled.div `\n  display: flex;\n  flex-direction: column;\n`;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Overlay } from '../Base';\nimport { Button, ButtonFillStyle, ButtonVariant } from '../../button';\nimport { CloseIcon } from '../../icons';\nimport { SideSheetBody, SideSheetContainer, SideSheetHeader } from './styled';\nexport const SideSheet = (props) => {\n    const { id, visible, title, onClose, idToFocusOnClose, children } = props;\n    const _dispatchOnClose = (e) => {\n        e.stopPropagation();\n        onClose?.();\n    };\n    return (_jsx(Overlay, { id: `${id}-overlay-container`, visible: visible, idToFocusOnClose: idToFocusOnClose, children: _jsxs(SideSheetContainer, { visible: visible, role: \"dialog\", \"aria-labelledby\": `${id}-drawer-title`, children: [_jsxs(SideSheetHeader, { children: [_jsx(Button, { style: { alignSelf: 'end' }, id: \"${`${this.id}-close-button`}\", iconOnly: true, fill: ButtonFillStyle.None, variant: ButtonVariant.Primary, \"aria-label\": \"Close\", onClick: _dispatchOnClose, children: _jsx(CloseIcon, {}) }), _jsx(\"h2\", { id: `${id}-drawer-title`, children: title })] }), _jsx(SideSheetBody, { children: children })] }) }));\n};\n"],"names":[],"sourceRoot":""}