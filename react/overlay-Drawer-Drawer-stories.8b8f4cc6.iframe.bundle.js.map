{"version":3,"file":"overlay-Drawer-Drawer-stories.8b8f4cc6.iframe.bundle.js","mappings":";;;AA4MA;;;;;AC7LA;;;ACNA;;AAQA;;;;ACJA","sources":["webpack://storybook-react19/./src/overlay/Drawer/Drawer.stories.tsx","webpack://storybook-react19/./src/utils/ImportBlock.tsx","webpack://storybook-react19/./src/utils/DescriptionBlock.tsx","webpack://storybook-react19/./src/utils/Comment.tsx"],"sourcesContent":["import React, { FormEvent, useState } from 'react';\nimport type { Meta, StoryFn } from '@storybook/react';\nimport { ButtonVariant, DrawerComponentWC } from '@tiger-analytics/ui';\nimport { Drawer, DrawerSlide } from '@tiger-analytics/react/overlay';\nimport { Button } from '@tiger-analytics/react/button';\nimport { GridColumn, GridContainer } from '@tiger-analytics/react/grid';\n\nimport { Input, TextArea } from '@tiger-analytics/react/formFields';\n\nimport styled from 'styled-components';\n\nimport { DescriptionBlock, ImportBlock } from '../../utils';\n\nexport default {\n  title: 'Overlay/Drawer/Drawer',\n  component: Drawer,\n  parameters: {\n    controls: { expanded: true },\n  },\n  argTypes: {\n    id: {\n      description: 'Mandatory - unique id for testing',\n      table: {\n        defaultValue: { summary: '' },\n      },\n      control: 'text',\n    },\n    visible: {\n      description: 'Controls the visibility of the drawer',\n      table: {\n        defaultValue: { summary: 'false' },\n      },\n      control: false,\n    },\n    onClose: {\n      description: 'Task to perform on close of the drawer.',\n      table: {\n        category: 'Custom Events',\n      },\n      control: false,\n    },\n    onSubmit: {\n      description:\n        'Task to perform on submit of the drawer. If the current slide has validate property then its outcome (true/false) will decide if onSubmit will be executed or not.',\n      table: {\n        category: 'Custom Events',\n      },\n      control: false,\n    },\n    goToStep: {\n      description:\n        'Multi-step only method - This method is available to programmaticaly navigate to a particular slide',\n      table: {\n        category: 'Methods',\n      },\n      control: false,\n    },\n  },\n} as Meta;\n\nconst description = `The ta-drawer component is used to display sliding drawers, typically from the right side of the screen. It is ideal for scenarios where you need to present additional content or actions without interrupting the main flow. It can support both single-step and multi-step content.\n\nUse it when you need to slide in additional content or actions, such as forms, information panels, or progress steps. The drawer can be controlled to navigate between steps (in the case of multi-step drawers).`;\n\nconst ErrorContainer = styled.div`\n  font-size: 0.8rem;\n  color: red;\n`;\n\nconst Template: StoryFn = (args) => {\n  const [isSingleStepDrawrrVisible, setIsSingleStepDrawrrVisible] = useState(false);\n  const [isMultiStepDrawrrVisible, setIsMultiStepDrawrrVisible] = useState(false);\n  const [taskName, setTaskName] = useState('');\n  const [taskDescription, setTaskDescription] = useState('');\n  const [error, setError] = useState('');\n\n  const drawerCloseHandler = (drawerId: string, drawerOpenerId: string) => {\n    const drawerActivateButton = document.getElementById(drawerOpenerId);\n\n    if (drawerActivateButton) {\n      drawerActivateButton.focus();\n    }\n    if (drawerId === `${args.id}-single`) {\n      setIsSingleStepDrawrrVisible(false);\n    } else {\n      setIsMultiStepDrawrrVisible(false);\n    }\n    setTaskName('');\n    setTaskDescription('');\n    setError('');\n  };\n\n  const programmaticallyNavigateTo1Handler = () => {\n    const drawer = document.getElementById(`${args.id}-multi`) as DrawerComponentWC;\n    drawer.goToStep(0);\n  };\n\n  const taskNameChangeHandler = (event: FormEvent) => {\n    const inputTarget = event.target as HTMLInputElement;\n    setTaskName(inputTarget.value);\n    setError('');\n  };\n\n  const taskDescriptionChangeHandler = (event: FormEvent) => {\n    const inputTarget = event.target as HTMLTextAreaElement;\n    setTaskDescription(inputTarget.value);\n    setError('');\n  };\n\n  const slide1Validator = (): boolean => {\n    if (!taskName || !taskDescription) {\n      setError('Both name and description are required.');\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  return (\n    <GridContainer showSideMargin={false}>\n      <ImportBlock\n        importStatement={`import { Drawer, DrawerSlide } from '@tiger-analytics/react/overlay';`}\n      />\n      <GridColumn style={{ gap: '10px' }}>\n        <Button\n          id=\"activate-drawer-single\"\n          onClick={() => setIsSingleStepDrawrrVisible(true)}\n          variant={ButtonVariant.Secondary}>\n          Show single step drawer\n        </Button>\n        <Button\n          id=\"activate-drawer-multi\"\n          onClick={() => setIsMultiStepDrawrrVisible(true)}\n          variant={ButtonVariant.Secondary}>\n          Show Multi step drawer\n        </Button>\n        <Drawer\n          id={`${args.id}-single`}\n          visible={isSingleStepDrawrrVisible}\n          onClose={() => drawerCloseHandler(`${args.id}-single`, 'activate-drawer-single')}\n          onSubmit={() => drawerCloseHandler(`${args.id}-single`, 'activate-drawer-single')}>\n          <DrawerSlide id=\"slide-1\" title=\"Slide 1\" validate={slide1Validator}>\n            <Input\n              id=\"create-task-name\"\n              label=\"Name\"\n              value={taskName}\n              onInput={taskNameChangeHandler}\n            />\n            <TextArea\n              id=\"create-task-description\"\n              label=\"Description\"\n              value={taskDescription}\n              onInput={taskDescriptionChangeHandler}\n              required\n            />\n            <ErrorContainer>{error}</ErrorContainer>\n          </DrawerSlide>\n        </Drawer>\n        <Drawer\n          id={`${args.id}-multi`}\n          visible={isMultiStepDrawrrVisible}\n          onClose={() => drawerCloseHandler(`${args.id}-multi`, 'activate-drawer-multi')}\n          onSubmit={() => drawerCloseHandler(`${args.id}-multi`, 'activate-drawer-multi')}>\n          <DrawerSlide id=\"slide-2\" title=\"Slide 1\" validate={slide1Validator}>\n            <Input\n              id=\"create-task-name\"\n              label=\"Name\"\n              value={taskName}\n              onInput={taskNameChangeHandler}\n            />\n            <TextArea\n              id=\"create-task-description\"\n              label=\"Description\"\n              value={taskDescription}\n              onInput={taskDescriptionChangeHandler}\n              required\n            />\n            <ErrorContainer>{error}</ErrorContainer>\n          </DrawerSlide>\n          <DrawerSlide id=\"slide-2\" title=\"Slide 2\">\n            <div>\n              <div>Step 2 Content</div>\n              <Button id=\"demo-goToStep-method\" onClick={programmaticallyNavigateTo1Handler}>\n                programmatically navigate to slide 1\n              </Button>\n            </div>\n          </DrawerSlide>\n          <DrawerSlide id=\"slide-3\" title=\"Slide 3\">\n            Slide 3 content\n          </DrawerSlide>\n        </Drawer>\n      </GridColumn>\n\n      <GridColumn>\n        <div className=\"story-title\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>\n      </GridColumn>\n\n      <GridColumn>\n        <DescriptionBlock description={description} />\n      </GridColumn>\n    </GridContainer>\n  );\n};\n\nexport const CodeAndAccessibility = Template.bind({});\nCodeAndAccessibility.args = {\n  id: 'test-drawer',\n  visible: false,\n};\n","import { GridColumn } from '@tiger-analytics/react/grid';\nimport React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const ImportBlockDiv = styled.div`\n  padding-bottom: 10px;\n  border-bottom: 1px solid var(--colors-primary-base);\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nexport interface ImportBlockProps {\n  importStatement: ReactNode;\n}\n\nexport const ImportBlock = ({ importStatement }: ImportBlockProps) => {\n  return (\n    <GridColumn>\n      <ImportBlockDiv>{importStatement}</ImportBlockDiv>\n    </GridColumn>\n  );\n};\n","import { GridColumn, GridContainer } from '@tiger-analytics/react/grid';\nimport React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const DescriptionBeforeSpacer = styled(GridColumn)`\n  border-bottom: 1px solid var(--colors-primary-base);\n  font-weight: bold;\n`;\n\nexport const DescriptionContent = styled(GridColumn)`\n  font-size: 14px;\n`;\n\nexport interface DescriptionBlockProps {\n  description: ReactNode;\n}\n\nexport const DescriptionBlock = ({ description }: DescriptionBlockProps) => {\n  return (\n    <GridContainer showSideMargin={false}>\n      <GridColumn>\n        <DescriptionBeforeSpacer>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        </DescriptionBeforeSpacer>\n      </GridColumn>\n      <DescriptionContent>{description}</DescriptionContent>\n    </GridContainer>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const CommentContainer = styled.div`\n  width: 100%;\n  font-size: 12px;\n  color: var(--colors-success-base);\n`;\n\nexport interface CommentBlockProps {\n  children: ReactNode;\n}\n\nexport const CommentBlock = ({ children }: CommentBlockProps) => {\n  return <CommentContainer>{children}</CommentContainer>;\n};\n"],"names":[],"sourceRoot":""}