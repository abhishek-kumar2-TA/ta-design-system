{"version":3,"file":"216.d3e89520.iframe.bundle.js","mappings":";;AAKA;;;AAGA;;AAEA;AACA;;AAEA;;;;;AAKA;;AAMA;;;AAOA;;;;AAQA;AACA;AACA;AACA;;;;;AAKA;;;;;AASA;;;AAOA;;AAIA;;;AAOA;;;;;AASA;;AAMA;;;;;;;AAWA;;AAMA;;;AASA;;AAGA;;AAMA;;;AAOA;;;;;AASA;;AAMA;;;AAOA;;;;;;;AAWA;;AAMA;;AAMA;;;AA7DA;;;;;;;;;;;;AC3GA;;;;;;;;;AASA;AACA;;;;;;AAOA;;;AAIA;;;;;;;;;;;AAWA;;;;;AAKA;;;;AAIA;;;;;;AAMA;;;AAIA;;;;AAKA;;;AAIA;;;;;;;;AASA;;;;AAKA;;;;AC3EA","sources":["webpack://storybook-react19/../../packages/react/dist/button/Base.js","webpack://storybook-react19/../../packages/react/dist/table/Table/styled.js","webpack://storybook-react19/../../packages/react/dist/table/Table/index.js"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { getThemeColorValue } from '../theme/utils';\nimport { ButtonFillStyle, ButtonSize, ButtonVariant } from './types';\nexport const Button = styled.button `\n  display: inline-flex;\n  width: ${({ iconOnly = false, size = ButtonSize.Default }) => iconOnly ? (size === ButtonSize.Default ? '44px' : '30px') : '100%'};\n  align-items: center;\n  justify-content: center;\n  height: ${({ size = ButtonSize.Default }) => (size === ButtonSize.Small ? '30px' : '44px')};\n  font-size: 20px;\n  font-family: ${({ theme }) => theme.global.specificFontFamily};\n  padding: ${({ iconOnly = false }) => (iconOnly ? 0 : ' 0 1.5rem')};\n  border: none;\n  border-radius: ${({ theme }) => theme.global.componentRadius};\n  transition: all 0.5s;\n  cursor: pointer;\n  flex-shrink: 0;\n\n  background-color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.primary.base\n    : variant === ButtonVariant.Secondary\n        ? getThemeColorValue('secondary')\n        : theme.colors.error.base};\n\n  color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.textSecondary.base\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.textPrimary.base\n        : theme.colors.textSecondary.base};\n\n  svg {\n    fill: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.textSecondary.base\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.textPrimary.base\n        : theme.colors.textSecondary.base};\n    transition: all 0.5s;\n  }\n\n  ${({ theme, iconOnly = false, size = ButtonSize.Default }) => css `\n    @media screen and (min-width: ${`${theme.breakpoints.medium}`}) {\n      width: ${iconOnly ? (size === ButtonSize.Default ? '44px' : '30px') : 'max-content'};\n      min-width: ${iconOnly ? (size === ButtonSize.Default ? '44px' : '30px') : '120px'};\n    }\n  `}\n\n  &:hover:not([disabled]) {\n    background-color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.primary.hover\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.secondary.hover\n        : theme.colors.error.hover};\n  }\n\n  &:focus:not([disabled]),\n  &:active:not([disabled]) {\n    background-color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.primary.active\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.secondary.active\n        : theme.colors.error.active};\n  }\n\n  ${({ theme, fill = ButtonFillStyle.Filled, variant = ButtonVariant.Primary }) => {\n    if (fill === ButtonFillStyle.None) {\n        return css `\n        background-color: transparent;\n        color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n\n        svg {\n          fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n        }\n\n        &:hover:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          }\n        }\n\n        &:active:not([disabled]),\n        &:focus:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          }\n        }\n      `;\n    }\n    if (fill === ButtonFillStyle.Outline) {\n        return css `\n        background-color: transparent;\n        color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n        border: 2px solid\n          ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n\n        svg {\n          fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n        }\n\n        &:hover:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          border: 2px solid\n            ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          }\n        }\n\n        &:focus:not([disabled]),\n        &:active:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          border: 2px solid\n            ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          }\n        }\n      `;\n    }\n}}\n\n  &[disabled] {\n    opacity: 0.7;\n    cursor: inherit;\n  }\n`;\n","import styled from 'styled-components';\nexport const Container = styled.div `\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding-bottom: 20px;\n  font-size: 1rem;\n`;\nexport const SortIconContainer = styled.span `\n  width: 1rem;\n  height: 1rem;\n  width: 1rem;\n  height: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  border: ${({ theme, isHidden }) => isHidden ? 'none' : `1px solid ${theme.colors.secondaryBackground.active}`};\n  background: ${({ theme, isHidden }) => isHidden ? 'transparent' : `${theme.colors.background.base}`};\n\n  svg {\n    width: 0.8rem;\n    height: 0.8rem;\n  }\n`;\nexport const TableWrapper = styled.div `\n  width: 100%;\n  overflow: auto;\n`;\nexport const StyledTable = styled.table `\n  width: 100%;\n  border-collapse: collapse;\n\n  th,\n  td {\n    padding: 0.75rem;\n    text-align: left;\n  }\n\n  th {\n    background-color: ${({ theme }) => theme.colors.secondaryBackground.base};\n    font-weight: bold;\n    user-select: none;\n\n    &:first-child {\n      border-top-left-radius: ${({ theme }) => theme.global.componentRadius};\n    }\n\n    &:last-child {\n      border-top-right-radius: ${({ theme }) => theme.global.componentRadius};\n    }\n  }\n\n  tbody {\n    tr {\n      border-top: 2px solid ${({ theme }) => theme.colors.secondaryBackground.active};\n    }\n  }\n`;\nexport const HeaderCell = styled.div `\n  display: flex;\n  align-items: center;\n  gap: 0.4rem;\n`;\nexport const PaginationControls = styled.div `\n  display: flex;\n  justify-content: space-between;\n`;\nexport const RowsPerPageContainer = styled.div `\n  display: flex;\n  gap: 10px;\n\n  > div {\n    width: inherit;\n    min-width: 50px;\n  }\n`;\nexport const PageIndexContainer = styled.div `\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n`;\nexport const Loading = styled.div `\n  text-align: center;\n  padding: 2rem;\n  font-size: 1.25rem;\n`;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { flexRender } from '@tanstack/react-table';\nimport { Button, ButtonFillStyle, ButtonSize } from '../../button';\nimport { DownArrowIcon, GreaterThanIcon, LessThanIcon, UpArrowIcon } from '../../icons';\nimport { Container, Loading, StyledTable, HeaderCell, PaginationControls, SortIconContainer, TableWrapper, RowsPerPageContainer, PageIndexContainer, } from './styled';\nimport { FieldSize, Select } from '../../formFields';\nexport const Table = (props) => {\n    const { id, table, isLoading, pagination, isRemote, pageCount } = props;\n    const currentPage = pagination.currentPage;\n    const isFirstPage = currentPage === 0;\n    const isLastPage = currentPage + 1 >= pageCount;\n    const goToPrevious = () => {\n        if (!isRemote) {\n            table.previousPage();\n        }\n        else if (!isFirstPage && pagination.onPageIndexSelection) {\n            pagination.onPageIndexSelection(currentPage - 1);\n        }\n    };\n    const goToNext = () => {\n        if (!isRemote) {\n            table.nextPage();\n        }\n        else if (!isLastPage && pagination.onPageIndexSelection) {\n            pagination.onPageIndexSelection(currentPage + 1);\n        }\n    };\n    const rowsPerPageOptions = useMemo(() => pagination.pageSizes.map((pageSize) => {\n        return { value: pageSize.toString(), label: pageSize.toString() };\n    }), []);\n    return (_jsxs(Container, { children: [isLoading ? (_jsx(Loading, { children: \"Loading...\" })) : (_jsx(TableWrapper, { children: _jsxs(StyledTable, { children: [_jsx(\"thead\", { children: table.getHeaderGroups().map((headerGroup) => (_jsx(\"tr\", { children: headerGroup.headers.map((header) => {\n                                    const canSort = header.column.getCanSort();\n                                    return (_jsx(\"th\", { onClick: canSort ? header.column.getToggleSortingHandler() : undefined, style: { cursor: canSort ? 'pointer' : 'default' }, children: header.isPlaceholder ? null : (_jsxs(HeaderCell, { children: [flexRender(header.column.columnDef.header, header.getContext()), canSort &&\n                                                    ({\n                                                        asc: (_jsx(SortIconContainer, { children: _jsx(UpArrowIcon, {}) })),\n                                                        desc: (_jsx(SortIconContainer, { children: _jsx(DownArrowIcon, {}) })),\n                                                    }[header.column.getIsSorted()] ?? (_jsx(SortIconContainer, { isHidden: true })))] })) }, header.id));\n                                }) }, headerGroup.id))) }), _jsx(\"tbody\", { children: table.getRowModel().rows.map((row) => (_jsx(\"tr\", { children: row.getVisibleCells().map((cell) => (_jsx(\"td\", { children: flexRender(cell.column.columnDef.cell, cell.getContext()) }, cell.id))) }, row.id))) })] }) })), _jsxs(PaginationControls, { children: [_jsx(RowsPerPageContainer, { children: !!rowsPerPageOptions.length && (_jsxs(_Fragment, { children: [_jsx(\"label\", { htmlFor: `table-${id}`, children: \"Rows per page\" }), _jsx(Select, { id: `table-${id}`, size: FieldSize.Small, value: pagination.currentPageSize.toString(), options: rowsPerPageOptions, onChangeHandler: pagination.onPageSizeSelection })] })) }), _jsxs(PageIndexContainer, { children: [_jsx(Button, { id: \"previous-table-page\", size: ButtonSize.Small, fill: ButtonFillStyle.None, onClick: goToPrevious, disabled: isRemote ? isFirstPage : !table.getCanPreviousPage(), iconOnly: true, \"aria-label\": \"go to previous page\", children: _jsx(LessThanIcon, {}) }), _jsxs(\"span\", { children: [\"Page \", currentPage + 1, \" of \", pageCount] }), _jsx(Button, { id: \"next-table-page\", size: ButtonSize.Small, fill: ButtonFillStyle.None, onClick: goToNext, disabled: isRemote ? isLastPage : !table.getCanNextPage(), iconOnly: true, \"aria-label\": \"go to next page\", children: _jsx(GreaterThanIcon, {}) })] })] })] }));\n};\n"],"names":[],"sourceRoot":""}