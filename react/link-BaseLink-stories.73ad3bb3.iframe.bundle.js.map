{"version":3,"file":"link-BaseLink-stories.73ad3bb3.iframe.bundle.js","mappings":";;;AAGA;AACA;;;AAGA;AACA;AACA;;AAEA;;;;;;;;AAQA;;;;;;AAMA;AACA;;;;AAIA;;;;;;AAMA;AACA;;;;AAIA;;;;;;;;;;;;;;AC1BA;;;ACNA;;AAQA;;;;;;ACFA;ACdA;AACA;;;;AAIA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;ACdA;;;AAGA;AACA;;;;;AAKA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;AAMA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;;;;AAKA;;AAEA;AACA;;AAEA;AACA;AACA;AACA","sources":["webpack://storybook-react19/../../packages/react/dist/link/styled.js","webpack://storybook-react19/./src/utils/ImportBlock.tsx","webpack://storybook-react19/./src/utils/DescriptionBlock.tsx","webpack://storybook-react19/./src/utils/Comment.tsx","webpack://storybook-react19/../../packages/react/dist/grid/GridColumn.js","webpack://storybook-react19/../../packages/react/dist/grid/GridContainer.js"],"sourcesContent":["import styled from\"styled-components\";import{LinkVariant,LinkSize,LinkStyle}from\"./types\";export const StyledLink=styled.a`\n  display: inline-flex;\n  text-decoration: none;\n  min-width: ${r=>r.width??\"max-content\"};\n  height: ${r=>r.height??\"initial\"};\n  align-items: center;\n  justify-content: center;\n  font-size: ${({size:r})=>r===LinkSize.Default?\"20px\":\"16px\"};\n  font-family: ${({theme:r})=>r.global.specificFontFamily};\n  padding: ${({size:r})=>r===LinkSize.Default?\"0.3rem 0.5rem\":\"0.2rem 0.5rem\"};\n  border: none;\n  color: ${({theme:r,variant:e})=>e===LinkVariant.Primary?r.colors.primary.base:e===LinkVariant.Secondary?r.colors.secondary.base:r.colors.error.base};\n  transition: all 0.5s;\n  cursor: pointer;\n  align-items: center;\n  gap: 6px;\n  background: transparent;\n\n  .design-system-link-inbuilt-right-arrow-icon {\n    fill: ${({theme:r,variant:e})=>e===LinkVariant.Primary?r.colors.primary.base:e===LinkVariant.Secondary?r.colors.secondary.base:r.colors.error.base};\n    transition: all 0.5s;\n    transform: translateX(0px);\n  }\n\n  &:hover:not([disabled]) {\n    color: ${({theme:r,variant:e})=>e===LinkVariant.Primary?r.colors.primary.hover:e===LinkVariant.Secondary?r.colors.secondary.hover:r.colors.error.hover};\n    text-decoration: ${({linkStyle:r})=>r===LinkStyle.Default?\"underline\":\"none\"};\n\n    .design-system-link-inbuilt-right-arrow-icon {\n      transform: translateX(4px);\n      fill: ${({theme:r,variant:e})=>e===LinkVariant.Primary?r.colors.primary.hover:e===LinkVariant.Secondary?r.colors.secondary.hover:r.colors.error.hover};\n    }\n  }\n\n  &:focus:not([disabled]),\n  &:active:not([disabled]) {\n    color: ${({theme:r,variant:e})=>e===LinkVariant.Primary?r.colors.primary.active:e===LinkVariant.Secondary?r.colors.secondary.active:r.colors.error.active};\n    text-decoration: ${({linkStyle:r})=>r===LinkStyle.Default?\"underline\":\"none\"};\n\n    .design-system-link-inbuilt-right-arrow-icon {\n      transform: translateX(4px);\n      fill: ${({theme:r,variant:e})=>e===LinkVariant.Primary?r.colors.primary.active:e===LinkVariant.Secondary?r.colors.secondary.active:r.colors.error.active};\n    }\n  }\n\n  &[disabled] {\n    opacity: 0.7;\n    cursor: inherit;\n    pointer-events: none;\n  }\n`;","import { GridColumn } from '@tiger-analytics/react/grid';\nimport React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const ImportBlockDiv = styled.div`\n  padding-bottom: 10px;\n  border-bottom: 1px solid var(--colors-primary-base);\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nexport interface ImportBlockProps {\n  importStatement: ReactNode;\n}\n\nexport const ImportBlock = ({ importStatement }: ImportBlockProps) => {\n  return (\n    <GridColumn>\n      <ImportBlockDiv>{importStatement}</ImportBlockDiv>\n    </GridColumn>\n  );\n};\n","import { GridColumn, GridContainer } from '@tiger-analytics/react/grid';\nimport React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const DescriptionBeforeSpacer = styled(GridColumn)`\n  border-bottom: 1px solid var(--colors-primary-base);\n  font-weight: bold;\n`;\n\nexport const DescriptionContent = styled(GridColumn)`\n  font-size: 14px;\n`;\n\nexport interface DescriptionBlockProps {\n  description: ReactNode;\n}\n\nexport const DescriptionBlock = ({ description }: DescriptionBlockProps) => {\n  return (\n    <GridContainer showSideMargin={false}>\n      <GridColumn>\n        <DescriptionBeforeSpacer>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        </DescriptionBeforeSpacer>\n      </GridColumn>\n      <DescriptionContent>{description}</DescriptionContent>\n    </GridContainer>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const CommentContainer = styled.div`\n  width: 100%;\n  font-size: 12px;\n  color: var(--colors-success-base);\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport interface CommentBlockProps {\n  children: ReactNode;\n}\n\nexport const CommentBlock = ({ children }: CommentBlockProps) => {\n  return <CommentContainer>{children}</CommentContainer>;\n};\n","import styled,{css}from\"styled-components\";export const GridColumn=styled.div`\n  grid-column: ${e=>`span ${e.sm||e.theme.grid.small.columns}`};\n  display: ${e=>0===e.sm?\"none\":\"flex\"};\n  flex-direction: column;\n  align-items: 'flex-start';\n\n  ${({theme:e,md:n,lg:m})=>css`\n    @media screen and (min-width: ${`${e.breakpoints.medium}`}) {\n      grid-column: ${e=>`span ${n||m||e.theme.grid.medium.columns}`};\n      display: ${0===n?\"none\":\"flex\"};\n    }\n\n    @media screen and (min-width: ${`${e.breakpoints.large}`}) {\n      grid-column: ${e=>`span ${m||e.theme.grid.large.columns}`};\n      display: ${0===m?\"none\":\"flex\"};\n    }\n  `}\n`;","import styled,{css}from\"styled-components\";export const GridContainer=styled.div`\n  display: grid;\n  width: 100%;\n  grid-gap: ${({theme:i})=>i.grid.small.gutter};\n  grid-template-columns: repeat(${({theme:i})=>i.grid.small.columns}, 1fr);\n  grid-template-rows: initial;\n  grid-auto-rows: initial;\n  margin: 0;\n  max-width: 100%;\n  grid-column: span ${({theme:i})=>i.grid.small.columns};\n\n  ${({showSideMargin:i})=>i&&css`\n      max-width: calc(100% - ${({theme:i})=>i.grid.small.margin} * 2);\n      margin-left: ${({theme:i})=>i.grid.small.margin} !important;\n      margin-right: ${({theme:i})=>i.grid.small.margin} !important;\n    `}\n\n  ${({restrictHeightToMaxContent:i})=>i&&css`\n      grid-template-rows: max-content;\n      grid-auto-rows: max-content;\n    `}\n\n  @media screen and (min-width: 768px) {\n    grid-template-columns: repeat(${({theme:i})=>i.grid.medium.columns}, 1fr);\n    margin: 0;\n    grid-gap: ${({theme:i})=>i.grid.medium.gutter};\n    max-width: 100%;\n    grid-column: span ${({theme:i})=>i.grid.medium.columns};\n\n    ${({showSideMargin:i})=>i&&css`\n        max-width: calc(100% - ${({theme:i})=>i.grid.medium.margin} * 2);\n        margin-left: ${({theme:i})=>i.grid.medium.margin} !important;\n        margin-right: ${({theme:i})=>i.grid.medium.margin} !important;\n      `}\n  }\n\n  @media screen and (min-width: 1200px) {\n    grid-template-columns: repeat(${({theme:i})=>i.grid.large.columns}, 1fr);\n    margin: 0;\n    grid-gap: ${({theme:i})=>i.grid.large.gutter};\n    grid-column: span ${({theme:i})=>i.grid.large.columns};\n\n    ${({showSideMargin:i})=>i&&css`\n        max-width: calc(100% - ${({theme:i})=>i.grid.large.margin} * 2);\n        margin-left: ${({theme:i})=>i.grid.large.margin} !important;\n        margin-right: ${({theme:i})=>i.grid.large.margin} !important;\n      `}\n  }\n`;"],"names":[],"sourceRoot":""}