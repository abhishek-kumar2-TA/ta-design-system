{"version":3,"file":"310.99a52ea8.iframe.bundle.js","mappings":";;;;;AAeA;;;ACNA;;AAQA;;;;;;ACFA;;ACVA;;;AAGA;;AAEA;AACA;;AAEA;;;;;AAKA;;AAMA;;;AAOA;;;;AAQA;AACA;AACA;AACA;;;;;AAKA;;;;;AASA;;;AAOA;;AAIA;;;AAOA;;;;;AASA;;AAMA;;;;;;;AAWA;;AAMA;;;AASA;;AAGA;;AAMA;;;AAOA;;;;;AASA;;AAMA;;;AAOA;;;;;;;AAWA;;AAMA;;AAMA;;;AA7DA;;;;;;;ACjHA;AACA;;;;AAIA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;ACdA;;;AAGA;AACA;;;;;AAKA;;AAEA;AAEA;AACA;AACA;;;AAGA;;;;;;AAOA;;AAEA;;AAEA;;AAEA;AAEA;AACA;AACA;;;;;AAKA;;AAEA;AACA;;AAEA;AAEA;AACA;AACA;;;;;;;AC3CA;AACA;;;;;;;;;;;AAWA;;;;;AAKA;;;;;AAQA;;;;;AAQA;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;AAoBA;;;AAIA;;;;;AAMA;;;;;;AC/EA;ACHA;;;;;;;;;;;AAWA;;;;;;AAMA;;;;;;;;;;AAaA;;;;AAOA;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA","sources":["webpack://storybook-react19/./src/utils/ImportBlock.tsx","webpack://storybook-react19/./src/utils/DescriptionBlock.tsx","webpack://storybook-react19/./src/utils/Comment.tsx","webpack://storybook-react19/../../packages/react/dist/button/Base.js","webpack://storybook-react19/../../packages/react/dist/grid/GridColumn.js","webpack://storybook-react19/../../packages/react/dist/grid/GridContainer.js","webpack://storybook-react19/../../packages/react/dist/notification/Alert/styled.js","webpack://storybook-react19/../../packages/react/dist/notification/Alert/index.js","webpack://storybook-react19/../../packages/react/dist/notification/Snackbar/styled.js"],"sourcesContent":["import { GridColumn } from '@tiger-analytics/react/grid';\nimport React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const ImportBlockDiv = styled.div`\n  padding-bottom: 10px;\n  border-bottom: 1px solid var(--colors-primary-base);\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nexport interface ImportBlockProps {\n  importStatement: ReactNode;\n}\n\nexport const ImportBlock = ({ importStatement }: ImportBlockProps) => {\n  return (\n    <GridColumn>\n      <ImportBlockDiv>{importStatement}</ImportBlockDiv>\n    </GridColumn>\n  );\n};\n","import { GridColumn, GridContainer } from '@tiger-analytics/react/grid';\nimport React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const DescriptionBeforeSpacer = styled(GridColumn)`\n  border-bottom: 1px solid var(--colors-primary-base);\n  font-weight: bold;\n`;\n\nexport const DescriptionContent = styled(GridColumn)`\n  font-size: 14px;\n`;\n\nexport interface DescriptionBlockProps {\n  description: ReactNode;\n}\n\nexport const DescriptionBlock = ({ description }: DescriptionBlockProps) => {\n  return (\n    <GridContainer showSideMargin={false}>\n      <GridColumn>\n        <DescriptionBeforeSpacer>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        </DescriptionBeforeSpacer>\n      </GridColumn>\n      <DescriptionContent>{description}</DescriptionContent>\n    </GridContainer>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nexport const CommentContainer = styled.div`\n  width: 100%;\n  font-size: 12px;\n  color: var(--colors-success-base);\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport interface CommentBlockProps {\n  children: ReactNode;\n}\n\nexport const CommentBlock = ({ children }: CommentBlockProps) => {\n  return <CommentContainer>{children}</CommentContainer>;\n};\n","import styled, { css } from 'styled-components';\nimport { getThemeColorValue } from '../theme/utils';\nimport { ButtonFillStyle, ButtonSize, ButtonVariant } from './types';\nexport const Button = styled.button `\n  display: inline-flex;\n  width: ${({ iconOnly = false, size = ButtonSize.Default }) => iconOnly ? (size === ButtonSize.Default ? '44px' : '30px') : '100%'};\n  align-items: center;\n  justify-content: center;\n  height: ${({ size = ButtonSize.Default }) => (size === ButtonSize.Small ? '30px' : '44px')};\n  font-size: 20px;\n  font-family: ${({ theme }) => theme.global.specificFontFamily};\n  padding: ${({ iconOnly = false }) => (iconOnly ? 0 : ' 0 1.5rem')};\n  border: none;\n  border-radius: ${({ theme }) => theme.global.componentRadius};\n  transition: all 0.5s;\n  cursor: pointer;\n  flex-shrink: 0;\n\n  background-color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.primary.base\n    : variant === ButtonVariant.Secondary\n        ? getThemeColorValue('secondary')\n        : theme.colors.error.base};\n\n  color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.textSecondary.base\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.textPrimary.base\n        : theme.colors.textSecondary.base};\n\n  svg {\n    fill: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.textSecondary.base\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.textPrimary.base\n        : theme.colors.textSecondary.base};\n    transition: all 0.5s;\n  }\n\n  ${({ theme, iconOnly = false, size = ButtonSize.Default }) => css `\n    @media screen and (min-width: ${`${theme.breakpoints.medium}`}) {\n      width: ${iconOnly ? (size === ButtonSize.Default ? '44px' : '30px') : 'max-content'};\n      min-width: ${iconOnly ? (size === ButtonSize.Default ? '44px' : '30px') : '120px'};\n    }\n  `}\n\n  &:hover:not([disabled]) {\n    background-color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.primary.hover\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.secondary.hover\n        : theme.colors.error.hover};\n  }\n\n  &:focus:not([disabled]),\n  &:active:not([disabled]) {\n    background-color: ${({ theme, variant = ButtonVariant.Primary }) => variant === ButtonVariant.Primary\n    ? theme.colors.primary.active\n    : variant === ButtonVariant.Secondary\n        ? theme.colors.secondary.active\n        : theme.colors.error.active};\n  }\n\n  ${({ theme, fill = ButtonFillStyle.Filled, variant = ButtonVariant.Primary }) => {\n    if (fill === ButtonFillStyle.None) {\n        return css `\n        background-color: transparent;\n        color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n\n        svg {\n          fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n        }\n\n        &:hover:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          }\n        }\n\n        &:active:not([disabled]),\n        &:focus:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          }\n        }\n      `;\n    }\n    if (fill === ButtonFillStyle.Outline) {\n        return css `\n        background-color: transparent;\n        color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n        border: 2px solid\n          ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n\n        svg {\n          fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.base\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.base\n                : theme.colors.error.base};\n        }\n\n        &:hover:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          border: 2px solid\n            ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.hover\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.hover\n                : theme.colors.error.hover};\n          }\n        }\n\n        &:focus:not([disabled]),\n        &:active:not([disabled]) {\n          background-color: transparent;\n          color: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          border: 2px solid\n            ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          svg {\n            fill: ${variant === ButtonVariant.Primary\n            ? theme.colors.primary.active\n            : variant === ButtonVariant.Secondary\n                ? theme.colors.secondary.active\n                : theme.colors.error.active};\n          }\n        }\n      `;\n    }\n}}\n\n  &[disabled] {\n    opacity: 0.7;\n    cursor: inherit;\n  }\n`;\n","import styled, { css } from 'styled-components';\nexport const GridColumn = styled.div `\n  grid-column: ${(props) => `span ${props.sm || props.theme.grid.small.columns}`};\n  display: ${(props) => (props.sm === 0 ? 'none' : 'flex')};\n  flex-direction: column;\n  align-items: 'flex-start';\n\n  ${({ theme, md, lg }) => css `\n    @media screen and (min-width: ${`${theme.breakpoints.medium}`}) {\n      grid-column: ${(props) => `span ${md || lg || props.theme.grid.medium.columns}`};\n      display: ${md === 0 ? 'none' : 'flex'};\n    }\n\n    @media screen and (min-width: ${`${theme.breakpoints.large}`}) {\n      grid-column: ${(props) => `span ${lg || props.theme.grid.large.columns}`};\n      display: ${lg === 0 ? 'none' : 'flex'};\n    }\n  `}\n`;\n","import styled, { css } from 'styled-components';\nexport const GridContainer = styled.div `\n  display: grid;\n  width: 100%;\n  grid-gap: ${({ theme }) => theme.grid.small.gutter};\n  grid-template-columns: repeat(${({ theme }) => theme.grid.small.columns}, 1fr);\n  grid-template-rows: initial;\n  grid-auto-rows: initial;\n  margin: 0;\n  max-width: 100%;\n  grid-column: span ${({ theme }) => theme.grid.small.columns};\n\n  ${({ showSideMargin }) => showSideMargin &&\n    css `\n      max-width: calc(100% - ${({ theme }) => theme.grid.small.margin} * 2);\n      margin-left: ${({ theme }) => theme.grid.small.margin} !important;\n      margin-right: ${({ theme }) => theme.grid.small.margin} !important;\n    `}\n\n  ${({ restrictHeightToMaxContent }) => restrictHeightToMaxContent &&\n    css `\n      grid-template-rows: max-content;\n      grid-auto-rows: max-content;\n    `}\n\n  @media screen and (min-width: 768px) {\n    grid-template-columns: repeat(${({ theme }) => theme.grid.medium.columns}, 1fr);\n    margin: 0;\n    grid-gap: ${({ theme }) => theme.grid.medium.gutter};\n    max-width: 100%;\n    grid-column: span ${({ theme }) => theme.grid.medium.columns};\n\n    ${({ showSideMargin }) => showSideMargin &&\n    css `\n        max-width: calc(100% - ${({ theme }) => theme.grid.medium.margin} * 2);\n        margin-left: ${({ theme }) => theme.grid.medium.margin} !important;\n        margin-right: ${({ theme }) => theme.grid.medium.margin} !important;\n      `}\n  }\n\n  @media screen and (min-width: 1200px) {\n    grid-template-columns: repeat(${({ theme }) => theme.grid.large.columns}, 1fr);\n    margin: 0;\n    grid-gap: ${({ theme }) => theme.grid.large.gutter};\n    grid-column: span ${({ theme }) => theme.grid.large.columns};\n\n    ${({ showSideMargin }) => showSideMargin &&\n    css `\n        max-width: calc(100% - ${({ theme }) => theme.grid.large.margin} * 2);\n        margin-left: ${({ theme }) => theme.grid.large.margin} !important;\n        margin-right: ${({ theme }) => theme.grid.large.margin} !important;\n      `}\n  }\n`;\n","import styled, { css } from 'styled-components';\nimport { NotificationVariant } from '../types';\nexport const NotificationContainer = styled.div `\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\nexport const NotificationContent = styled.div `\n  display: ${({ visible }) => (visible ? 'flex' : 'none')};\n  flex-direction: column;\n  width: 100%;\n  max-width: 600px;\n  margin-left: 20px;\n  margin-right: 20px;\n  border-radius: var(--global-componentRadius);\n  position: fixed;\n  z-index: 100;\n  width: 100%;\n  top: 60px;\n  animation-name: ${({ visible }) => (visible ? 'notificationOnLoad' : '')};\n  animation-duration: 0.6s;\n  animation-timing-function: ease-out;\n  animation-fill-mode: forwards;\n\n  ${({ variant }) => {\n    if (variant === NotificationVariant.Error) {\n        return css `\n        background-color: var(--colors-error-base);\n        color: var(--colors-background-base);\n        border: 1px solid var(--colors-error-base);\n        box-shadow: 0px 2px 8px 0px var(--colors-error-base);\n      `;\n    }\n    else if (variant === NotificationVariant.Info) {\n        return css `\n        background-color: var(--colors-background-active);\n        color: var(--colors-textPrimary-base);\n        border: none;\n        box-shadow: 0px 2px 8px 0px var(--colors-primary-base);\n      `;\n    }\n    else if (variant === NotificationVariant.Success) {\n        return css `\n        background-color: var(--colors-success-base);\n        color: var(--colors-background-base);\n        border: 1px solid var(--colors-success-base);\n        box-shadow: 0px 2px 8px 0px var(--colors-success-base);\n        button {\n          svg {\n            fill: var(--colors-background-base) !important;\n          }\n        }\n      `;\n    }\n    else {\n        return css `\n        background-color: var(--colors-warning-base);\n        color: var(--colors-textPrimary-base);\n        border: 1px solid var(--colors-warning-base);\n        box-shadow: 0px 2px 8px 0px var(--colors-warning-base);\n      `;\n    }\n}}\n\n  @keyframes notificationOnLoad {\n    0% {\n      transform: translateY(-100%);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0%);\n      opacity: 1;\n    }\n  }\n`;\nexport const NotificationHeader = styled.div `\n  display: flex;\n  align-items: center;\n`;\nexport const NotificationTitle = styled.div `\n  font-family: var(--global-specificFontFamily);\n  flex-grow: 1;\n  padding-left: 1rem;\n  padding-right: 1rem;\n`;\nexport const NotificationAdditionalContent = styled.div `\n  padding-left: 1rem;\n  padding-right: 1rem;\n  margin-right: 40px;\n  font-size: 0.9rem;\n  margin-bottom: 4px;\n`;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useRef } from 'react';\nimport { CloseIcon } from '../../icons';\nimport { NotificationVariant } from '../types';\nimport { Button, ButtonFillStyle, ButtonVariant } from '../../button';\nimport { NotificationAdditionalContent, NotificationContainer, NotificationContent, NotificationHeader, NotificationTitle, } from './styled';\nexport const Alert = (props) => {\n    const { id, title, visible, variant = NotificationVariant.Error, onClose, idToFocusOnClose, children, } = props;\n    const closeRef = useRef(null);\n    const alertCloseHandler = (event) => {\n        onClose?.(event);\n        if (idToFocusOnClose) {\n            document.getElementById(idToFocusOnClose)?.focus();\n        }\n    };\n    useEffect(() => {\n        if (visible && closeRef.current) {\n            closeRef.current.focus();\n        }\n    }, [visible]);\n    return (_jsx(NotificationContainer, { id: id, role: \"status\", \"aria-live\": \"assertive\", children: _jsxs(NotificationContent, { visible: !!visible, variant: variant, children: [_jsxs(NotificationHeader, { children: [_jsx(NotificationTitle, { children: title }), _jsx(Button, { id: `${id}-close-button`, iconOnly: true, ref: closeRef, fill: variant === NotificationVariant.Error ? ButtonFillStyle.Filled : ButtonFillStyle.None, variant: variant === NotificationVariant.Error ? ButtonVariant.Destruct : ButtonVariant.Primary, \"aria-label\": \"Close\", onClick: alertCloseHandler, children: _jsx(CloseIcon, {}) })] }), _jsx(NotificationAdditionalContent, { children: children })] }) }));\n};\n","import styled, { css } from 'styled-components';\nimport { NotificationVariant } from '../types';\nexport const SnackbarContainer = styled.div `\n  display: ${({ visible }) => (visible ? 'flex' : 'none')};\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  z-index: 1000;\n  width: 300px;\n  border-radius: var(--global-componentRadius);\n  padding: 8px;\n  transition:\n    opacity 0.5s ease,\n    transform 0.5s ease;\n  animation-name: ${({ visible }) => (visible ? 'notificationOnShow' : 'notificationOnHide')};\n  animation-duration: 0.6s;\n  animation-timing-function: ease-out;\n  animation-fill-mode: forwards;\n  gap: 10px;\n\n  ${({ variant }) => {\n    if (variant === NotificationVariant.Error) {\n        return css `\n        background-color: var(--colors-error-base);\n        color: var(--colors-background-base);\n        border: 1px solid var(--colors-error-base);\n\n        button {\n          svg {\n            fill: var(--colors-background-base) !important;\n          }\n        }\n      `;\n    }\n    else if (variant === NotificationVariant.Info) {\n        return css `\n        background-color: var(--colors-background-active);\n        color: var(--colors-textPrimary-base);\n        border: none;\n      `;\n    }\n    else if (variant === NotificationVariant.Success) {\n        return css `\n        background-color: var(--colors-success-base);\n        color: var(--colors-background-base);\n        border: 1px solid var(--colors-success-base);\n\n        button {\n          svg {\n            fill: var(--colors-background-base) !important;\n          }\n        }\n      `;\n    }\n    else {\n        return css `\n        background-color: var(--colors-warning-base);\n        color: var(--colors-textPrimary-base);\n        border: 1px solid var(--colors-warning-base);\n      `;\n    }\n}}\n\n  @keyframes notificationOnShow {\n    0% {\n      opacity: 0;\n      transform: translateX(100%);\n    }\n    100% {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n\n  @keyframes notificationOnHide {\n    0% {\n      opacity: 1;\n      transform: translateX(0);\n    }\n    100% {\n      opacity: 0;\n      transform: translateX(100%);\n    }\n  }\n`;\nexport const SnackbarMessage = styled.div `\n  flex-grow: 1;\n  display: flex;\n  align-items: center;\n`;\n"],"names":[],"sourceRoot":""}