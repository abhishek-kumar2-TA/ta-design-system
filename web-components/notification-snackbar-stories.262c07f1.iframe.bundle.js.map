{"version":3,"file":"notification-snackbar-stories.262c07f1.iframe.bundle.js","mappings":";AAiEA;;AAaA;AACA;AACA;AACA;AACA;AAZA;AAcA;;;;;AAtBA;;;AAiCA","sources":["webpack://storybook-ui/./src/notification/snackbar.stories.ts"],"sourcesContent":["import type { Meta, StoryFn } from '@storybook/web-components';\nimport { NotificationVariant, SnackbarComponentWC } from '@tiger-analytics/ui';\nimport { html } from 'lit';\n\nexport default {\n  title: 'Notification/ta-snackbar',\n  component: 'ta-snackbar',\n  parameters: {\n    controls: { expanded: true },\n  },\n  argTypes: {\n    id: {\n      description: 'Mandatory - unique id for testing',\n      table: {\n        defaultValue: { summary: '' },\n      },\n      control: 'text',\n    },\n    message: {\n      description: 'The message to be displayed in the snackbar',\n      table: {\n        defaultValue: { summary: '' },\n      },\n      control: 'text',\n    },\n    visible: {\n      description: 'Controls whether the snackbar is visible or not',\n      table: {\n        defaultValue: { summary: 'false' },\n      },\n      control: false,\n    },\n    variant: {\n      options: [\n        NotificationVariant.Error,\n        NotificationVariant.Info,\n        NotificationVariant.Success,\n        NotificationVariant.Warning,\n      ],\n      description: 'The style variant of the notification',\n      table: {\n        defaultValue: { summary: NotificationVariant.Success },\n      },\n      control: { type: 'select' },\n    },\n    duration: {\n      description: 'Duration for auto-hide (0 means no auto-hide)',\n      table: {\n        defaultValue: { summary: '5000' },\n      },\n      control: 'number',\n    },\n    onClose: {\n      description: 'Triggered when the snackbar is closed (after the hide animation)',\n      table: {\n        category: 'Custom Events',\n      },\n      control: false,\n    },\n  },\n} as Meta;\n\nconst description = `The ta-snackbar component is designed to show non-intrusive feedback messages to the user. The component will automatically disappear after the specified duration, but it can also be manually dismissed.`;\n\nconst Template: StoryFn = (args) => {\n  const toggleSnackbar = () => {\n    const snackbarNotification = document.getElementById(args.id) as SnackbarComponentWC;\n    snackbarNotification.visible = true;\n  };\n\n  const closeSnackbarHandler = () => {\n    const snackbarNotification = document.getElementById(args.id) as SnackbarComponentWC;\n    snackbarNotification.visible = false;\n  };\n\n  return html`\n    <ta-button id=\"show-snackbar\" @click=\"${toggleSnackbar}\">Show/Hide Snackbar</ta-button>\n    <ta-snackbar\n      id=\"${args.id}\"\n      .message=\"${args.message}\"\n      .variant=\"${args.variant}\"\n      .visible=\"${false}\"\n      .duration=\"${args.duration}\"\n      @onClose=\"${closeSnackbarHandler}\"></ta-snackbar>\n    <ta-grid-container .showSideMargin=\"${false}\">\n      <ta-grid-column>\n        <div class=\"story-title\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>\n      </ta-grid-column>\n      <ta-grid-column>\n        <div class=\"story-description\">${description}</div>\n      </ta-grid-column>\n    </ta-grid-container>\n  `;\n};\n\nexport const CodeAndAccessibility = Template.bind({});\nCodeAndAccessibility.args = {\n  id: 'test-snackbar',\n  message: 'Success! Your operation was completed.',\n  duration: 5000,\n  variant: NotificationVariant.Success,\n};\n"],"names":[],"sourceRoot":""}