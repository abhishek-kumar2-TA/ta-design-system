{"version":3,"file":"overlay-drawerSlide-stories.f34fc07c.iframe.bundle.js","mappings":";AA8CA;;;;AAfA;AAoBA;;;;;AAKA;AACA;AACA;;;;;;;AA9BA;;;AAwCA","sources":["webpack://storybook-ui/./src/overlay/drawerSlide.stories.ts"],"sourcesContent":["import type { Meta, StoryFn } from '@storybook/web-components';\nimport { ButtonVariant, DrawerComponentWC } from '@tiger-analytics/ui';\nimport { html } from 'lit';\n\nexport default {\n  title: 'Overlay/Drawer/ta-drawer-slide',\n  component: 'ta-drawer-slide',\n  parameters: {\n    controls: { expanded: true },\n  },\n  argTypes: {\n    id: {\n      description: 'Mandatory - unique id for testing',\n      table: {\n        defaultValue: { summary: '' },\n      },\n      control: 'text',\n    },\n    title: {\n      description: 'Mandatory - title to be displayed on the drawer',\n      table: {\n        defaultValue: { summary: '' },\n      },\n      control: 'text',\n    },\n  },\n} as Meta;\n\nconst description = `One or more ta-drawer-slide must be the immediate children of drawer to display the slides accurately.`;\n\nconst Template: StoryFn = (args) => {\n  const drawerOpenHandler = () => {\n    const drawer = document.querySelector('ta-drawer') as HTMLElement;\n    drawer.setAttribute('visible', 'true');\n  };\n\n  const drawerCloseHandler = () => {\n    const drawer = document.querySelector('ta-drawer') as HTMLElement;\n    drawer.removeAttribute('visible');\n    const drawerActivateButton = document.getElementById('activate-drawer');\n    if (drawerActivateButton) {\n      drawerActivateButton.focus();\n    }\n  };\n\n  return html`\n    <ta-grid-container .showSideMargin=\"${false}\">\n      <ta-grid-column style=\"gap: 10px\">\n        <ta-button\n          id=\"activate-drawer\"\n          @click=\"${drawerOpenHandler}\"\n          variant=\"${ButtonVariant.Secondary}\"\n          >Show drawer</ta-button\n        >\n        <ta-drawer\n          id=\"ta-drawer-id\"\n          @onClose=\"${drawerCloseHandler}\"\n          @onSubmit=\"${drawerCloseHandler}\">\n          <ta-drawer-slide id=\"${args.id}\" title=\"${args.title}\">Slide content </ta-drawer-slide>\n        </ta-drawer>\n      </ta-grid-column>\n      <ta-grid-column>\n        <div class=\"story-title\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>\n      </ta-grid-column>\n      <ta-grid-column>\n        <div class=\"story-description\">${description}</div>\n      </ta-grid-column>\n    </ta-grid-container>\n  `;\n};\n\nexport const CodeAndAccessibility = Template.bind({});\nCodeAndAccessibility.args = {\n  id: 'test-drawer-slide',\n  title: 'Slide title',\n};\n"],"names":[],"sourceRoot":""}