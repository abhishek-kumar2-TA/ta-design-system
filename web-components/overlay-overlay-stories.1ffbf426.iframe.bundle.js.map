{"version":3,"file":"overlay-overlay-stories.1ffbf426.iframe.bundle.js","mappings":";AAyFA;;;;AAIA;AACA;;;;;AAKA;AACA;AA1BA;AAOA;;;;;;;;;AA8BA;AACA;;;AAGA;;;;;AAKA;AACA;;;;;;;AAOA;AACA;;;;;;;;AArEA;;;AAgFA","sources":["webpack://storybook-ui/./src/overlay/overlay.stories.ts"],"sourcesContent":["import type { Meta, StoryFn } from '@storybook/web-components';\nimport { ButtonVariant, OverlayContentAlign } from '@tiger-analytics/ui';\nimport { html } from 'lit';\n\nexport default {\n  title: 'Overlay/ta-overlay',\n  component: 'ta-overlay',\n  parameters: {\n    controls: { expanded: true },\n  },\n  argTypes: {\n    'visible': {\n      description: 'Controls the visibility of the overlay',\n      table: {\n        defaultValue: { summary: 'false' },\n      },\n      control: false,\n    },\n    'containerId': {\n      description: 'id of the container to trap the focus within.',\n      table: {\n        defaultValue: { summary: '' },\n      },\n      control: false,\n    },\n    'overlayContentAlign': {\n      options: [\n        OverlayContentAlign.TopLeft,\n        OverlayContentAlign.TopCenter,\n        OverlayContentAlign.TopRight,\n        OverlayContentAlign.MiddleLeft,\n        OverlayContentAlign.MiddleCenter,\n        OverlayContentAlign.MiddleRight,\n        OverlayContentAlign.BottomLeft,\n        OverlayContentAlign.BottomCenter,\n        OverlayContentAlign.BottomRight,\n      ],\n      description: 'Alignment of the overlay content',\n      table: {\n        defaultValue: { summary: OverlayContentAlign.MiddleCenter },\n      },\n      control: { type: 'select' },\n    },\n    'on-active-focus': {\n      description: 'Event to focus the first actionable item on overlay activation',\n      table: {\n        category: 'Custom Events',\n      },\n      control: false,\n    },\n    'on-close': {\n      description: 'Event to perform task on overlay deactivation',\n      table: {\n        category: 'Custom Events',\n      },\n      control: false,\n    },\n  },\n} as Meta;\n\nconst description = `The ta-overlay component is the base for creating overlay-type components like modals. It provides a content slot and focus management for accessibility. Before creating a new component with ta-overlay, please check the components list for any existing overlay components, such as modals, that may suit your needs.`;\n\nconst Template: StoryFn = (args) => {\n  // Create a function to toggle the visibility of the overlay\n  const toggleOverlayVisibility = () => {\n    const overlay = document.querySelector('ta-overlay') as HTMLElement;\n    const isVisible = overlay?.hasAttribute('visible');\n    if (isVisible) {\n      overlay.removeAttribute('visible');\n    } else {\n      overlay.setAttribute('visible', 'true');\n    }\n  };\n\n  const onActiveFocusHandler = () => {\n    const buttonComponent = document.getElementById('overlay-close');\n    if (buttonComponent) {\n      buttonComponent.focus();\n    }\n  };\n\n  const onCloseHandler = () => {\n    const buttonComponent = document.getElementById('activate-overlay');\n    if (buttonComponent) {\n      buttonComponent.focus();\n    }\n  };\n\n  return html`\n    <ta-grid-container .showSideMargin=\"${false}\">\n      <ta-grid-column style=\"gap: 10px\">\n        <ta-button\n          id=\"activate-overlay\"\n          @click=\"${toggleOverlayVisibility}\"\n          variant=\"${ButtonVariant.Secondary}\"\n          >Show Overlay</ta-button\n        >\n        <ta-overlay\n          id=\"test-overlay\"\n          .visible=\"${args.visible}\"\n          .overlayContentAlign=\"${args.overlayContentAlign}\"\n          @onActiveFocus=\"${onActiveFocusHandler}\"\n          @onClose=\"${onCloseHandler}\">\n          <div\n            style=\"background: white; padding: 16px; border-radius: 8px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);\">\n            <h2>Overlay Content</h2>\n            <p>\n              This is some content inside the overlay. Click the close button below to dismiss it.\n            </p>\n            <ta-button\n              id=\"overlay-close\"\n              @click=\"${toggleOverlayVisibility}\"\n              variant=\"${ButtonVariant.Secondary}\"\n              >Close Overlay</ta-button\n            >\n            <ta-button id=\"overlay-dummy-button-1\" @click=\"${() => window.alert('Dummy button 1')}\"\n              >Dummy button 1</ta-button\n            >\n            <ta-button\n              id=\"overlay-dummy-button-2\"\n              @click=\"${() => window.alert('Dummy button 2')}\"\n              variant=\"${ButtonVariant.Destruct}\"\n              >Dummy button 2</ta-button\n            >\n          </div>\n        </ta-overlay>\n        <ta-button\n          id=\"overlay-demo-button-1\"\n          @click=\"${() => window.alert('Demo button 1')}\"\n          variant=\"${ButtonVariant.Destruct}\"\n          >Demo button 1</ta-button\n        >\n      </ta-grid-column>\n      <ta-grid-column>\n        <div class=\"story-title\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>\n      </ta-grid-column>\n      <ta-grid-column>\n        <div class=\"story-description\">${description}</div>\n      </ta-grid-column>\n    </ta-grid-container>\n  `;\n};\n\nexport const CodeAndAccessibility = Template.bind({});\nCodeAndAccessibility.args = {\n  visible: false,\n  overlayContentAlign: OverlayContentAlign.MiddleCenter,\n};\n"],"names":[],"sourceRoot":""}